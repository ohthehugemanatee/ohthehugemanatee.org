<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>howto on Oh The Huge Manatee!</title>
    <link>https://ohthehugemanatee.org/categories/howto/</link>
    <description>Recent content in howto on Oh The Huge Manatee!</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 07 Jun 2017 00:33:24 +0000</lastBuildDate><atom:link href="https://ohthehugemanatee.org/categories/howto/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Stop waiting for Feeds module: how to import RSS in Drupal 8</title>
      <link>https://ohthehugemanatee.org/blog/2017/06/07/stop-waiting-for-feeds-module-how-to-import-remote-feeds-in-drupal-8/</link>
      <pubDate>Wed, 07 Jun 2017 00:33:24 +0000</pubDate>
      
      <guid>https://ohthehugemanatee.org/blog/2017/06/07/stop-waiting-for-feeds-module-how-to-import-remote-feeds-in-drupal-8/</guid>
      <description>How do you import an RSS feed into entities with Drupal 8? In Drupal 6 and 7, you probably used the Feeds module. Feeds 7 made it easy (-ish) to click together a configuration that matches an RSS (or any XML, or CSV, or OPML, etc) source to a Drupal entity type, maps source data into Drupal fields, and runs an import with the site Cron. Where has that functionality gone in D8?</description>
    </item>
    
    <item>
      <title>How to build a new source for Drupal Migrate 8</title>
      <link>https://ohthehugemanatee.org/blog/2015/05/02/how-to-build-a-new-source-for-drupal-migrate-8/</link>
      <pubDate>Sat, 02 May 2015 10:10:36 +0000</pubDate>
      
      <guid>https://ohthehugemanatee.org/blog/2015/05/02/how-to-build-a-new-source-for-drupal-migrate-8/</guid>
      <description>This week I wanted to accomplish a task in Drupal 8 that would be simple in Drupal 7: Import several CSV files, each one related to the others by taxonomy terms. Most importantly, I wanted to do it with Migrate module.
Migrate in Drupal 7 is a fantastic piece of code. It is not designed to be used from the GUI, rather, it provides a framework of &amp;ldquo;source&amp;rdquo;, &amp;ldquo;destination&amp;rdquo;, and &amp;ldquo;migration&amp;rdquo; classes so that even the most convoluted migration is 90% written for you.</description>
    </item>
    
    <item>
      <title>How to remove a Drupal install profile</title>
      <link>https://ohthehugemanatee.org/blog/2014/01/07/how-to-remove-a-drupal-install-profile/</link>
      <pubDate>Tue, 07 Jan 2014 13:23:45 +0000</pubDate>
      
      <guid>https://ohthehugemanatee.org/blog/2014/01/07/how-to-remove-a-drupal-install-profile/</guid>
      <description>Install profiles are a great way to throw together a functional Drupal site really quickly. In Drupal 6, an Install Profile was just a blueprint for setting up a site really quickly. What you did after the site was installed was your own business! But in Drupal 7 profiles are much more integrated with core. The assumption is that when you use an install profile, you want to rely on the profile&amp;rsquo;s maintainer for all your updates.</description>
    </item>
    
    <item>
      <title>How to create a custom Panels Pane</title>
      <link>https://ohthehugemanatee.org/blog/2014/01/03/how-to-create-a-custom-panels-pane/</link>
      <pubDate>Fri, 03 Jan 2014 13:09:11 +0000</pubDate>
      
      <guid>https://ohthehugemanatee.org/blog/2014/01/03/how-to-create-a-custom-panels-pane/</guid>
      <description>Lots of sites are now built with the &amp;ldquo;Panels everywhere&amp;rdquo; method, using Panels and Panelizer to configure modular layouts in the Drupal GUI. These modules come with lots of great default Panes, and create even more defaults based on your existing Blocks and Views. But there&amp;rsquo;s always a case for a custom Pane.
As usual, I&amp;rsquo;ll assume that you have an empty custom module called mymodule, with only a .info and a .</description>
    </item>
    
    <item>
      <title>44,497 people are wrong: how to NEVER need Views PHP.</title>
      <link>https://ohthehugemanatee.org/blog/2013/12/26/44497-people-are-wrong-how-to-never-use-views-php/</link>
      <pubDate>Thu, 26 Dec 2013 12:01:44 +0000</pubDate>
      
      <guid>https://ohthehugemanatee.org/blog/2013/12/26/44497-people-are-wrong-how-to-never-use-views-php/</guid>
      <description>You&amp;rsquo;re building a View, but you can&amp;rsquo;t get that field to display the way you want it to. Or filter, or sort. Or maybe you have some data in a custom table that you want to include in the View. So you look for a contributed module, and Views PHP looks like the answer to your problem! Until you read the module page, where it says:
 &amp;ldquo;&amp;hellip;it is highly advisable to use regular handlers and plugins when available (or even to create one yourself).</description>
    </item>
    
    <item>
      <title>Custom Context conditions</title>
      <link>https://ohthehugemanatee.org/blog/2013/12/02/custom-context-conditions/</link>
      <pubDate>Mon, 02 Dec 2013 09:06:49 +0000</pubDate>
      
      <guid>https://ohthehugemanatee.org/blog/2013/12/02/custom-context-conditions/</guid>
      <description>One of the big advantages to using the Context module is how totally extensible it is. Not only can you use and re-use the built in conditions, you can write your own. This brings all the power of the custom PHP evaluation method of block placement, but in a structure that makes your code re-usable, contributable, versioned, and standards-based. Writing a custom Context Condition is also a great template for how to integrate custom behaviors in many of the more complex Drupal modules such as Views and Search_API.</description>
    </item>
    
  </channel>
</rss>
