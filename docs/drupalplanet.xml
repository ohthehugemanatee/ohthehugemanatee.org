<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Oh The Huge Manatee!</title>
  <link href="https://ohthehugemanatee.org/atom.xml" rel="self"/>
  <link href="https://ohthehugemanatee.org/"/>
  <updated>2022-12-20T09:01:00+01:00</updated>
  <id>https://ohthehugemanatee.org/</id>
  <author>
    <name>Campbell Vertesi (ohthehugemanatee)</name>
    <uri>https://ohthehugemanatee.org/</uri>
  </author>
  <generator>Hugo -- gohugo.io</generator>
  <entry>
    <title type="html"><![CDATA[Drupal Does Face Recognition: Introducing Image Auto Tag module]]></title>
    <link href="https://ohthehugemanatee.org/blog/2018/04/19/face-recognition-on-drupal/"/>
    <id>https://ohthehugemanatee.org/blog/2018/04/19/face-recognition-on-drupal/</id>
    <author>
      <name>Campbell Vertesi (ohthehugemanatee)</name>
    </author>
    <published>2018-04-19T18:06:51+00:00</published>
    <updated>2018-04-19T18:06:51+00:00</updated>
    <content type="html"><![CDATA[<p>Last week I wrote a Drupal module that uses face recognition to automatically tag images with the people in them. You can find it on <a href="https://github.com/ohthehugemanatee/image_auto_tag">Github</a>, of course. With this module, you can add an image to a node, and automatically populate an entity_reference field with the names of the people in the image. This isn&rsquo;t such a big deal for individual nodes of course; it&rsquo;s really interesting for bulk use cases, like Digital Asset Management systems.</p>
<p><img src="/images/image-auto-tag.gif" alt="Automatic tags, now in a Gif."></p>
<p>I had a great time at Drupalcon Nashville, reconnecting with friends, mentors, and colleagues as always. But this time I had some fresh perspective. After 3 months working with Microsoft&rsquo;s (badass) CSE unit - building cutting edge proofs-of-concept for some of their biggest customers - the contrast was powerful. The Drupal core development team are famously obsessive about code quality and about optimizing the experience for developers and users. The velocity in the platform is truly amazing. But we&rsquo;re missing out on a lot of the recent stuff that large organizations are building in their more custom applications. You may have noticed the same: all the cool kids are posting about Machine Learning, sentiment analysis, and computer vision. We don&rsquo;t see any of that at Drupalcon.</p>
<p>There&rsquo;s no reason to miss out on this stuff, though. Services like Azure are making it extremely easy to do all of these things, layering simple HTTP-based APIs on top of the complexity. As far as I can tell, the biggest obstacle is that there aren&rsquo;t well defined standards for how to interact with these kinds of services, so it&rsquo;s hard to make a generic module for them. This isn&rsquo;t like the Lucene/Solr/ElasticSearch world, where one set of syntax - indeed, one model of how to think of content and communicate with a search-specialized service - has come to dominate. Great modules like search_api depend on these conceptual similarities between backends, and they just don&rsquo;t exist yet for cognitive services.</p>
<p>So I set out to try and explore those problems in a Drupal module.</p>
<p><strong>Image Auto Tag</strong> is my first experiment. It works, and I encourage you to play around with it, but please don&rsquo;t even think of using it in production yet. It&rsquo;s a starting point for how we might build an analog to the great <a href="https://drupal.org/project/search_api">search_api</a> framework, for cognitive services rather than search.</p>
<p>I built it on Azure&rsquo;s Cognitive Services Face API to start. Since the service is free for up to 5000 requests per month, this seemed like a place that most Drupalists would feel comfortable playing. Next up I&rsquo;ll abstract the Azure portion of it into a plugin system, and try to define a common interface that makes sense whether it&rsquo;s referring to Azure cognitive services, or a self-hosted, open source system like <a href="https://cmusatyalab.github.io/openface/">OpenFace</a>. That&rsquo;s the actual &ldquo;hard work&rdquo;.</p>
<p>In the meantime, I&rsquo;ll continue to make this more robust with more tests, an easier UI, asynchronous operations, and so on. At a minimum it&rsquo;ll become a solid &ldquo;Azure Face Detection&rdquo; module for Drupal, but I would love to make it more generally useful than that.</p>
<p>Comments, Issues, and helpful PRs are welcome.</p>
]]></content>
    </entry>
  <entry>
    <title type="html"><![CDATA[I&#39;m joining Microsoft, because they&#39;re doing Open Source Right]]></title>
    <link href="https://ohthehugemanatee.org/blog/2018/01/10/im-joining-microsoft-because-theyre-doing-open-source-right/"/>
    <id>https://ohthehugemanatee.org/blog/2018/01/10/im-joining-microsoft-because-theyre-doing-open-source-right/</id>
    <author>
      <name>Campbell Vertesi (ohthehugemanatee)</name>
    </author>
    <published>2018-01-10T20:32:50+00:00</published>
    <updated>2018-01-10T20:32:50+00:00</updated>
    <content type="html"><![CDATA[<p>I&rsquo;m excited to announce that I&rsquo;ve signed with <strong>Microsoft</strong> as a Principal Software Engineering Manager. <strong>I&rsquo;m joining Microsoft because they are doing enterprise Open Source the Right Way, and I want to be a part of it</strong>. This is a sentence that I never believed I would write or say, so I want to explain.</p>
<p>First I have to acknowledge the history. I co-founded my first tech company just as the <a href="https://en.wikipedia.org/wiki/Halloween_documents">Halloween documents</a> were leaked. That&rsquo;s where the world learned that Microsoft considered Open Source (and Linux in particular) a threat, and was intentionally spreading FUD as a strategic counter. It was also the origin of their famous <a href="https://en.wikipedia.org/wiki/Embrace%2C_extend%2C_and_extinguish">Embrace, Extend, and Extinguish</a> strategy. The Microsoft approach to Open Source only got more aggressive from there, funneling money to <a href="https://en.wikipedia.org/wiki/SCO/Linux_controversies">SCO&rsquo;s lawsuits</a> against Linux and its users, calling OSS licensing a &ldquo;cancer&rdquo;, and accusing Linux of violating MS intellectual property.</p>
<p>I don&rsquo;t need to get exhaustive about this to make my point: <strong>for the first decade of my career (or more), Microsoft was rightly perceived as a villain in the OSS world</strong>. They did real damage and disservice to the open source movement, and ultimately to their own customers. Five years ago I wouldn&rsquo;t have even entertained the thought of working for &ldquo;the evil empire.&rdquo;</p>
<p>Yes, Microsoft has made nice movements towards open source since the new CEO (Satya Nadella) took over in 2014. They open sourced .NET and Visual Studio, they released Typescript, they joined the <a href="https://www.linuxfoundation.org/">Linux Foundation</a> and went platinum with the <a href="https://opensource.org/">Open Source Initiative</a>, but come on. I&rsquo;m an open source warrior, an evangelist, and developer. I could see through the bullshit. Even when Microsoft announced the Linux subsystem on Windows, I was certain that this was just another round of Embrace, Extend, Extinguish.</p>
<p>Then I met <a href="http://www.joshholmes.com/">Josh Holmes</a> at the <a href="https://www.phpconference.nl/">Dutch PHP Conference</a>.</p>
<p>First of all, I was shocked to meet a Microsoft representative at an open source conference. He didn&rsquo;t even have bodyguards. I remember my first question for him was &ldquo;What are you <em>doing</em> here?&rdquo;.</p>
<p>Josh told me a story about visiting startup conferences in Silicon Valley on behalf of Microsoft in 2007, and reporting back to Ballmer&rsquo;s office:</p>
<blockquote>
<p>&ldquo;The good news is, no one is making jokes about Microsoft anymore. The bad news is, <strong>they aren&rsquo;t even making jokes about Microsoft anymore</strong>.&rdquo;</p>
</blockquote>
<p>For Josh, this was a big &ldquo;aha&rdquo; moment. The booming tech startup space was focused on Open Source, so if Microsoft wanted to survive there, they had to come to the table.</p>
<p>That revelation led to the creation of the Microsoft Partner Catalyst Team. Here&rsquo;s Josh&rsquo;s explanation of the team and its job, from an <a href="https://www.youtube.com/watch?v=qkTioWRH-Ws">interview</a> at the time I met him:</p>
<blockquote>
<p>&ldquo;We work with a lot of startups, at the very top edge of the enterprise mix. We look at their toughest problems, and we go solve those problems with open source. We&rsquo;ve got 70 engineers and architects, and we go work with the startups hand in hand. We&rsquo;ll sit down for a little pair programming with them, sometimes it will be a large enough problem that will take it off on our own and we&rsquo;ll work on it for a while, and we&rsquo;ll come back and give them the code. Everything that we do ends up in Github under typically an MIT or Apache license if it&rsquo;s original work that we&rsquo;re doing on our own, or a lot of times we&rsquo;re actually working within other open source projects.&rdquo;</p>
</blockquote>
<p>Meeting with Josh was a turning point for my understanding of Microsoft. This wasn&rsquo;t just something that I could begrudgingly call &ldquo;OK for open source&rdquo;. This wasn&rsquo;t just lip service. This was a whole department of people that were doing <em>exactly</em> what I believe in. Not only did I like the sound of this; I found that <strong>I actually wanted to work with this group</strong>.</p>
<p>Still, when I considered interviewing with Microsoft, <strong>I knew that my first question had to be about &ldquo;Embrace, Extend, and Extinguish&rdquo;</strong>. Josh is a nice guy, and very smart, but I wasn&rsquo;t going to let the wool be pulled over <em>my</em> eyes.</p>
<p>Over the next months, I would speak with five different people doing exactly this kind of work at Microsoft. I  I did my research, I plumbed all my back-channel resources for dirt. And everything I came back with said <strong>I was wrong</strong>.</p>
<p>Microsoft really <em>is</em> undergoing a fundamental shift towards Open Source.</p>
<p>CEO Sadya Nadella is frank that <strong>closed-source licensing as a profit model is a dead-end</strong>. Since 2014, Microsoft has been transitioning their core business from licensed software to platform services. After all, why sell a license once, when you can rent it out monthly? So they move all the licensed products they can online, and rent, instead of selling them. Then they rent out the infrastructure itself, too - hence Azure. Suddenly flexibility is at a premium. As one CTO put it, <strong>for Azure to be Windows-only would be a liability</strong>.</p>
<p>This shift is old news for most of the world. As much as the Hacker News crowd still bitches about it as FUD, this strategic direction has been in and out of the financial pages for years now. Microsoft has pivoted to platform services. Look at their profits by product over the last 8 years:</p>
<p><img src="/images/microsoft-profits-by-product.png" alt="Microsoft profits by product, over year."></p>
<p>The trend is obvious: <strong>server and platform services are the place to invest</strong>. Office only remains at the top of the heap because it transitioned to SaaS. Even Windows license profits are declining. This means focusing on interoperability. Make sure <em>everything</em> can run on your platform, because anything else is to handicap the source of your biggest short- and medium-term profit. In fact, <strong>remaining adversarial to Open Source would kill the golden goose</strong>. Microsoft <em>has</em> to change its values in order to make this shift.</p>
<p>So much for financial and strategic direction; but this is a hundred-thousand-person company. That ship doesn&rsquo;t turn on a dime, no matter what the press releases tell you. So <strong>my second interview question became &ldquo;How is the transition going?&rdquo;</strong> This sort of question makes people uncomfortable: the answer is either transparently unrealistic, or critical of your environment and colleagues. Over and over again, I heard the right answer: It&rsquo;s freakin&rsquo; hard.</p>
<p>MS has more than 40 years of proprietary development experience and institutional momentum. All of their culture and systems - from hiring, to code reviews, to legal authorizations - have been organized around that model. That&rsquo;s very hard to change! I heard horror stories about the beginning of the transition, having to pass every line of contribution past the Legal department. I heard about managers feeling lost, or losing a sense of authority over their own team. I heard about development teams struggling to understand that their place in an OSS project was on par with some Rando Calrissian contributor from Kansas. And I heard about how the company was helping people with the transition, changing systems and structures to make this cultural shift happen.</p>
<p>The stories I heard were important evidence, which contradicted the old narrative I had in my head. <strong>Embrace, extend, extinguish does not involve leadership challenges, or breaking down of hierarchies</strong>. It does not involve personal struggle and departmental reorganization. The stories I heard evidenced an organization trying a real paradigm shift, for tens of thousands of people around the world. It is not perfect, and it is not finished, but I believe that the transition is real.</p>
<p><strong>When you accept that Microsoft is trying to reorient its own culture to Open Source, suddenly all those &ldquo;transparent&rdquo; PR moves you dismissed get re-framed</strong>. They are accomplishments. It&rsquo;s incredibly difficult to change the culture of one of the biggest companies in the world&hellip; but today, almost half of Azure users run Linux. Microsoft&rsquo;s virtualization work made them the <a href="http://www.techradar.com/news/software/operating-systems/inside-the-linux-kernel-3-0-1035353/2">fifth largest contributor to the 3.x Linux kernel</a>. Microsoft maintains <a href="https://octoverse.github.com/">the biggest project on Github (by contributor count)</a>. They maintain a BSD distribution <em>and</em> a Linux distribution. And a huge part of LXD (the container-based virtualization system for Linux) comes from Microsoft&rsquo;s work with Canonical.</p>
<p>That&rsquo;s impressive for any company. But Microsoft? It boggles the mind. This level of contribution is not lip-service. You don&rsquo;t maintain a 15 thousand person community just for PR. <strong>Microsoft is contributing as much or more to open source than many other major players, who have had this in their culture from the start</strong> (Google, Facebook, Twitter, LinkedIn&hellip;). It&rsquo;s an accomplishment, and it&rsquo;s impressive!</p>
<p>In the group I&rsquo;m entering, a strong commitment to Open Source is built into the project structure, the team responsibilities, and the budgeting practice. Every project has time specifically set aside for contribution; developers&rsquo; connections to their communities are respected and encouraged. After a decade of working with companies who try to engage with open source responsibly, I can say that <strong>this is the strongest institutional commitment to &ldquo;giving back&rdquo; that I have ever seen</strong>. It&rsquo;s a stronger support for contribution than I&rsquo;ve ever been able to offer in any of my roles, from sole proprietor to CTO.</p>
<p>This does mean a lot more work outside of the Drupal world, though. I will still attend Drupalcons. I will still give technical talks, participate, and help make great open source communities for Drupal and other OSS projects. If anything, I will do those things <em>more</em>. And I will do them wearing a Microsoft shirt.</p>
<p>Microsoft is making a genuine, and enormous, push to being open source community members and leaders. From everything I&rsquo;ve seen, they are doing it extremely well. From the outside at least, <strong>this is what it looks like to do enterprise Open Source The Right Way</strong>.</p>
]]></content>
    </entry>
  <entry>
    <title type="html"><![CDATA[Why no mainstream PHP speakers come to Drupalcon - and how we&#39;re changing that]]></title>
    <link href="https://ohthehugemanatee.org/blog/2017/07/28/bring-php-to-drupalcon/"/>
    <id>https://ohthehugemanatee.org/blog/2017/07/28/bring-php-to-drupalcon/</id>
    <author>
      <name>Campbell Vertesi (ohthehugemanatee)</name>
    </author>
    <published>2017-07-28T17:01:59+00:00</published>
    <updated>2017-07-28T17:01:59+00:00</updated>
    <content type="html"><![CDATA[<p>I&rsquo;ve learned something incredible as the PHP Track Chair for Drupalcon Vienna. <strong>The Drupal Association has no way to invite PHP speakers to Drupalcon</strong>.</p>
<p>This blew me away when I first learned about it. After all the work to bring mainstream PHP to Drupal core, after all the outreach to <a href="https://php-fig.org">PHP-FIG</a>, after all the talks Drupalists have given at major PHP conferences, how is this possible?</p>
<p>You see, <strong>basically every other PHP conference covers their speakers&rsquo; travel and accommodation costs</strong>. Drupalcon doesn&rsquo;t, and never has. Historically it has to do with Drupalcon&rsquo;s identity as a community conference, rather than a professional one. But it means <strong>the best PHP speakers never get to Drupalcon</strong>.</p>
<p>On one hand that&rsquo;s great for our project: our speakers are all passionate volunteers! They&rsquo;re specialists who care deeply about the project. On the other hand, it contributes to isolated, &ldquo;stay on the island&rdquo; thinking. If the only speakers we hear are Drupalists, where do we get new insights? If the only people at the BoF or code sprint table are Drupalists, how do we leverage the strengths of the broader PHP community? How do we contribute back? <em>How do we grow?</em></p>
<p>Every year, the lack of financial support holds back major PHP contributors from speaking at Drupalcon. The maintainers of Composer, PHPUnit, and Guzzle <em>want</em> to come to Drupalcon, but we don&rsquo;t make it possible. <strong>These people built and maintain the cornerstones of Drupal. Why do we hold them at arm&rsquo;s length?</strong></p>
<p>This year, as Drupalcon PHP Track Chair, I&rsquo;m in a position to make some changes. So I invited two notable PHP speakers to come and join us at the con: <strong>Sebastian Bergmann, author of PHPUnit</strong>, and <strong>Michelle Sanver, president of @phpwomen</strong>. Today I&rsquo;m announcing a very special <a href="https://www.gofundme.com/php-at-drupalcon">GoFundMe campaign</a> to pay the travel and accommodation for these two exceptional contributors.</p>
<!-- raw HTML omitted -->
<p>I believe in the benefits of closer cooperation with the PHP community.</p>
<p>I believe there&rsquo;s a lot we can learn from these people, and a lot we can teach them too.</p>
<p><strong>And I believe that I&rsquo;m not the only one.</strong></p>
<p>We&rsquo;ve estimated costs conservatively; this is not a lot of money. Anything we collect above and beyond their needs will go to the Drupal Association, but let&rsquo;s be honest with ourselves: this campaign isn&rsquo;t just about bringing Sebastian and Michelle to Drupalcon. <strong>Your donation shows the Drupal Association that you want to welcome contributors from other communities.</strong> You prove to them that their constituents <em>want</em> to bring in this kind of speaker. <strong>When you donate, you stand up for the kind of community you believe in.</strong></p>
<p>Please <a href="https://www.gofundme.com/php-at-drupalcon/donate">donate</a>, share, and tweet the campaign today.</p>
<!-- raw HTML omitted -->
]]></content>
    </entry>
  <entry>
    <title type="html"><![CDATA[Better PHP === Better Drupalists: the PHP track at Drupalcon Vienna]]></title>
    <link href="https://ohthehugemanatee.org/blog/2017/06/15/better-php-better-drupalists/"/>
    <id>https://ohthehugemanatee.org/blog/2017/06/15/better-php-better-drupalists/</id>
    <author>
      <name>Campbell Vertesi (ohthehugemanatee)</name>
    </author>
    <published>2017-06-15T17:19:24+00:00</published>
    <updated>2017-06-15T17:19:24+00:00</updated>
    <content type="html"><![CDATA[<p>One of the best parts of Drupal 8 is our shift to enterprise PHP coding structures. With tools like composer and Symfony&rsquo;s structures like Events and Dependency Injection, Drupalists are learning to be great PHP developers, and vice-versa. Today, the fastest route to becoming a rock star Drupalist is through PHP.</p>
<p>I&rsquo;m one of the PHP track chairs for Drupalcon Vienna, and this year our focus is <em>better PHP === better Drupalists</em>. How can better PHP make your life as a Drupal developer easier?</p>
<p><strong>Do you like PHP 7?</strong> We want to hear about the technicalities of types, throwing all the things, and your favorite operators (mine is null coalesce, but full respect for you spaceship operator fans).</p>
<p><strong>Have you seen the light of functional programming?</strong> Tell us why we should love higher orders with lambda functions and closures. Let&rsquo;s hear the finer points of first class functions.</p>
<p><strong>Do your tests bring all the bugs to the yard?</strong> We want to talk about it. Every method is a promise, and your tests make sure you keep your promises. We want sessions about test driven development in a drupal context, choosing the right test framework and scope, and how your real-world tests are saving you real-world time.</p>
<p><strong>Have you written a composer library wrapper module yet?</strong> Submit a session about how composer is saving you lines of code.</p>
<p><strong>Is your development environment fine-tuned for drupal excellence?</strong> Tell us how, and why.</p>
<p>We have only two weeks left until session submissions close! <a href="https://events.drupal.org/node/add/session?og_group_ref=14447">Get your session in now</a> and help us make Drupal code something to be proud of.</p>]]></content>
    </entry>
  <entry>
    <title type="html"><![CDATA[Stop waiting for Feeds module: how to import RSS in Drupal 8]]></title>
    <link href="https://ohthehugemanatee.org/blog/2017/06/07/stop-waiting-for-feeds-module-how-to-import-remote-feeds-in-drupal-8/"/>
    <id>https://ohthehugemanatee.org/blog/2017/06/07/stop-waiting-for-feeds-module-how-to-import-remote-feeds-in-drupal-8/</id>
    <author>
      <name>Campbell Vertesi (ohthehugemanatee)</name>
    </author>
    <published>2017-06-07T00:33:24+00:00</published>
    <updated>2017-06-07T00:33:24+00:00</updated>
    <content type="html"><![CDATA[<p>How do you import an RSS feed into entities with Drupal 8? In Drupal 6 and 7, you probably used the <a href="https://drupal.org/project/feeds">Feeds</a> module. Feeds 7 made it easy (-ish) to click together a configuration that matches an RSS (or any XML, or CSV, or OPML, etc) source to a Drupal entity type, maps source data into Drupal fields, and runs an import with the site Cron. Where has that functionality gone in D8? I recently had to build a podcast mirror for a client that needed this functionality, and I was surprised at what I found.</p>
<p><strong>Feeds module</strong> doesn&rsquo;t have a stable release candidate, and it doesn&rsquo;t look like one is coming any time soon. They&rsquo;re still surveying people about what feeds module should even DO in D8. As the module page explains:</p>
<p>{%blockquote %}
It&rsquo;s not ready yet, but we are brainstorming about what would be the best way forward. Want to help us? Fill in our survey.
If you decide to use it, don&rsquo;t be mad if we break it later.
{% endblockquote %}</p>
<p>This does not inspire confidence.</p>
<p>The next great candidate is <a href="https://www.drupal.org/docs/8/core/modules/aggregator/overview">Aggregator</a> module (in core). Unfortunately, Aggregator gives you no control over the kind of entity to create, let alone any kind of field mapping. It imports content into its own Aggregated Content entity, with everything in one field, and linking offsite. I suppose you could extend it to choose you own entity type, map fields etc, but that seems like a lot of work for such a simple feature.</p>
<p>Frustrating, right?</p>
<p><strong>What if I told you that Drupal 8 can do everything Feeds 7 can?</strong></p>
<p>What if I told you that it&rsquo;s even better: instead of clicking through endless menus and configuration links, waiting for things to load, missing problems, and banging your head against the mouse, you can set this up with one simple piece of text. You can copy and paste it directly from this blog post into Drupal&rsquo;s admin interface.</p>
<h2 id="what-how">What? How?</h2>
<p>Drupal 8 can do all the Feedsy stuff you like with <a href="https://www.drupal.org/docs/8/api/migrate-api/migrate-api-overview">Migrate</a> module. Migrate in D8 core already contains all the elements you need to build a regular importer of ANYTHING into D8. Add a couple of contrib modules to provide specific plugins for XML sources and convenience drush functions, and <em>baby you&rsquo;ve got a stew goin&rsquo;!</em></p>
<p>Here&rsquo;s the short version Howto:</p>
<p><strong>1) Download and enable <a href="https://drupal.org/project/migrate_plus">migrate_plus</a> and <a href="https://drupal.org/project/migrate_tools">migrate_tools</a> modules.</strong> You should be doing this with composer, but I won&rsquo;t judge. Just get them into your codebase and enable them. Migrate Plus provides plugins for core Migrate, so you can parse remote XML, JSON, CSV, or even arbitrary spreadsheet data. Migrate Tools gives us drush commands for running migrations.</p>
<p><strong>2) Write your Migration configuration in text</strong>, and paste it into the configuration import admin page (<code>admin/config/development/configuration/single/import</code>), or import it another way. I&rsquo;ve included a starter YAML just below, you should be able to copypasta, change a few values, and be done in time for tea.</p>
<p><strong>3) Add a line to your system cron</strong> to run <code>drush migrate -y my_rss_importer</code> at whatever interval you like.</p>
<p>That&rsquo;s it. One YAML file, most of which is copypasta. One cronjob. All done!</p>
<p>Here&rsquo;s my RSS importer config for your copy and pasting pleasure. If you&rsquo;re already comfortable with migration YAMLs and XPaths, just add the names of your RSS fields as selectors in the source section, map them to drupal fields in the process section, and you&rsquo;re all done!</p>
<p>If you aren&rsquo;t familiar with this stuff yet, don&rsquo;t worry! We&rsquo;ll dissect this together, below.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">id</span>: <span style="color:#ae81ff">my_rss_importer</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">label</span>: <span style="color:#e6db74">&#39;Import my RSS feed&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">status</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">source</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">plugin</span>: <span style="color:#ae81ff">url</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">data_fetcher_plugin</span>: <span style="color:#ae81ff">http</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">urls</span>: <span style="color:#e6db74">&#39;https://example.com/feed.rss&#39;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">data_parser_plugin</span>: <span style="color:#ae81ff">simple_xml</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">item_selector</span>: <span style="color:#ae81ff">/rss/channel/item</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">fields</span>:
</span></span><span style="display:flex;"><span>    -
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">name</span>: <span style="color:#ae81ff">guid</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">label</span>: <span style="color:#ae81ff">GUID</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">selector</span>: <span style="color:#ae81ff">guid</span>
</span></span><span style="display:flex;"><span>    -
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">name</span>: <span style="color:#ae81ff">title</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">label</span>: <span style="color:#ae81ff">Title</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">selector</span>: <span style="color:#ae81ff">title</span>
</span></span><span style="display:flex;"><span>    -
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">name</span>: <span style="color:#ae81ff">pub_date</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">label</span>: <span style="color:#e6db74">&#39;Publication date&#39;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">selector</span>: <span style="color:#ae81ff">pubDate</span>
</span></span><span style="display:flex;"><span>    -
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">name</span>: <span style="color:#ae81ff">link</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">label</span>: <span style="color:#e6db74">&#39;Origin link&#39;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">selector</span>: <span style="color:#ae81ff">link</span>
</span></span><span style="display:flex;"><span>    -
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">name</span>: <span style="color:#ae81ff">summary</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">label</span>: <span style="color:#ae81ff">Summary</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">selector</span>: <span style="color:#e6db74">&#39;itunes:summary&#39;</span>
</span></span><span style="display:flex;"><span>    -
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">name</span>: <span style="color:#ae81ff">image</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">label</span>: <span style="color:#ae81ff">Image</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">selector</span>: <span style="color:#e6db74">&#39;itunes:image[&#39;&#39;href&#39;&#39;]&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">ids</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">guid</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">type</span>: <span style="color:#ae81ff">string</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">destination</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">plugin</span>: <span style="color:#e6db74">&#39;entity:node&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">process</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">slug</span>: <span style="color:#ae81ff">stop-waiting-for-feeds-module-how-to-import-remote-feeds-in-drupal-8</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">title</span>: <span style="color:#ae81ff">title</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">field_remote_url</span>: <span style="color:#ae81ff">link</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">body</span>: <span style="color:#ae81ff">summary</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">created</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">plugin</span>: <span style="color:#ae81ff">format_date</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">from_format</span>: <span style="color:#e6db74">&#39;D, d M Y H:i:s O&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">to_format</span>: <span style="color:#e6db74">&#39;U&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">source</span>: <span style="color:#ae81ff">pub_date</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">status</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">plugin</span>: <span style="color:#ae81ff">default_value</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">default_value</span>: <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">type</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">plugin</span>: <span style="color:#ae81ff">default_value</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">default_value</span>: <span style="color:#ae81ff">podcast_episode</span>
</span></span></code></pre></div><p>Some of you can just stop here. If you&rsquo;re familiar with the format and the structures involved, this example is probably all you need to set up your easy RSS importer.</p>
<p>In the interest of good examples for Migrate module though, I&rsquo;m going to continue. Read on if you want to learn more about how this config works, and how you can use Migrate to do even more amazing things&hellip;</p>
<h2 id="anatomy-of-a-migration-yaml">Anatomy of a migration YAML</h2>
<p>Let&rsquo;s dive into that YAML a bit. Migrate is one of the most powerful components of Drupal 8 core, and this configuration is your gateway to it.</p>
<p>That YAML looks like a lot, but it&rsquo;s really just 4 sections. They can appear in any order, but we need all 4: General information, source, destination, and data processing. This isn&rsquo;t rocket science after all! Let&rsquo;s look at these sections one at a time.</p>
<p><strong>General information</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">id</span>: <span style="color:#ae81ff">my_rss_importer</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">label</span>: <span style="color:#e6db74">&#39;My RSS feed importer&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">status</span>: <span style="color:#66d9ef">true</span>
</span></span></code></pre></div><p>This is the basic stuff about the migration configuration. At a minimum it needs a unique machine-readable ID, a human-readable label, and <code>status: true</code> so it&rsquo;s enabled. There are other keys you can include here for fun extra features, like module dependencies, groupings (so you can run several imports together!), tags, and language. These are the critical ones, though.</p>
<p><strong>Source</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">source</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">plugin</span>: <span style="color:#ae81ff">url</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">data_fetcher_plugin</span>: <span style="color:#ae81ff">file</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">urls</span>: <span style="color:#e6db74">&#39;https://example.com/feed.rss&#39;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">data_parser_plugin</span>: <span style="color:#ae81ff">simple_xml</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">item_selector</span>: <span style="color:#ae81ff">/rss/channel/item</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">fields</span>:
</span></span><span style="display:flex;"><span>    -
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">name</span>: <span style="color:#ae81ff">guid</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">label</span>: <span style="color:#ae81ff">GUID</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">selector</span>: <span style="color:#ae81ff">guid</span>
</span></span><span style="display:flex;"><span>    -
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">name</span>: <span style="color:#ae81ff">title</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">label</span>: <span style="color:#ae81ff">Item Title</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">selector</span>: <span style="color:#ae81ff">title</span>
</span></span><span style="display:flex;"><span>    -
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">name</span>: <span style="color:#ae81ff">pub_date</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">label</span>: <span style="color:#e6db74">&#39;Publication date&#39;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">selector</span>: <span style="color:#ae81ff">pubDate</span>
</span></span><span style="display:flex;"><span>    -
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">name</span>: <span style="color:#ae81ff">link</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">label</span>: <span style="color:#e6db74">&#39;Origin link&#39;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">selector</span>: <span style="color:#ae81ff">link</span>
</span></span><span style="display:flex;"><span>    -
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">name</span>: <span style="color:#ae81ff">summary</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">label</span>: <span style="color:#ae81ff">Summary</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">selector</span>: <span style="color:#e6db74">&#39;itunes:summary&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">ids</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">guid</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">type</span>: <span style="color:#ae81ff">string</span>
</span></span></code></pre></div><p>This is the one that intimidates most people: it&rsquo;s where you describe the RSS source. Migrate module is even more flexible than Feeds was, so there&rsquo;s a lot to specify here&hellip; but it all makes sense if you take it in small pieces.</p>
<p>First: we want to use a remote file, so we&rsquo;ll use the Url plugin (there are others, but none that we care about right now). All the rest of the settings belong to the Url plugin, even though they aren&rsquo;t indented or anything.</p>
<p>There are two possibilities for Url&rsquo;s data_fetcher setting: file and http. <code>file</code> is for anything you could pass to PHP&rsquo;s <a href="https://secure.php.net/manual/en/function.file-get-contents.php">file_get_contents</a>, including remote URLs. There are some great performance tricks in there, so it&rsquo;s a good option for most use cases. We&rsquo;ll be using <code>file</code> for our example. <code>http</code> is specifically for remote files accessed over HTTP, and lets you use the full power of the HTTP spec to get your file. Think authentication headers, cache rules, etc.</p>
<p>Next we declare which plugin will read (parse) the data from that remote URL. We can read JSON, SOAP, arbitrary XML&hellip; in our use case this is an RSS feed, so we&rsquo;ll use one of the XML plugins. SimpleXML is just what it sounds like: a simple way to get data out of XML. In extreme use cases you might use XML instead, but I haven&rsquo;t encountered that yet (ever, anywhere, in any of my projects). TL;DR: SimpleXML is great. Use it.</p>
<p>Third, we have to tell the source where it can find the actual items to import. XML is freeform, so there&rsquo;s no way for Migrate to know where the future &ldquo;nodes&rdquo; are in the document. So you have to give it the XPath to the items. RSS feeds have a standardized path: <code>/rss/channel/item</code>.</p>
<p>Next we have to identify the &ldquo;fields&rdquo; in the source. You see, migrate module is built around the idea that you&rsquo;ll map source fields to destination fields. That&rsquo;s core to how it thinks about the whole process. Since XML (and by extension RSS) is an unstructured format - it doesn&rsquo;t think of itself as having &ldquo;fields&rdquo; at all. So we&rsquo;ll have to give our source plugin XPaths for the data we want out of the feed, assigning each path to a virtual &ldquo;field&rdquo;. These &ldquo;fake fields&rdquo; let Migrate treat this source just like any other.</p>
<p>If you haven&rsquo;t worked with XPaths before, the example YAML in this post gives you most of what you need to know. It&rsquo;s just a simple text system for specifying a tag within an unstructured XML document. Not too complicated when you get into it. You may want to <a href="https://duckduckgo.com/?q=xpath+basics">find a good tutorial</a> to learn some of the tricks.</p>
<p>Let&rsquo;s look at one of these &ldquo;fake fields&rdquo;:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span>      <span style="color:#f92672">name</span>: <span style="color:#ae81ff">summary</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">label</span>: <span style="color:#ae81ff">Summary</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">selector</span>: <span style="color:#e6db74">&#39;itunes:summary&#39;</span>
</span></span></code></pre></div><p><em>name</em> is how we&rsquo;ll address this field in the rest of the migration. It&rsquo;s the source &ldquo;field name&rdquo;. <em>label</em> is the human readable name for the field. <em>selector</em> is the XPath inside the item. Most items are flat - certainly in RSS - so it&rsquo;s basically just the tag that surrounds the data you want. There, was that so hard?</p>
<p>As a side note, you can see that my RSS feeds tend to be for iTunes. Sometimes the world eats an apple, sometimes an apple eats the world. Buy me a beer at Drupalcon and we can argue about standards.</p>
<p>Fifth and finally, we identify which &ldquo;field&rdquo; in the source contains a unique identifier. Migrate module keeps track of the association between the source and destination objects, so it can handle updates, rollbacks, and more. The example YAML relies on the very common (but technically optional) <code>&lt;guid&gt;</code> tag as a unique identifier.</p>
<p><strong>Destination</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">destination</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">plugin</span>: <span style="color:#e6db74">&#39;entity:node&#39;</span>
</span></span></code></pre></div><p>Yep, it&rsquo;s that simple. This is where you declare what Drupal entity type will receive the data. Actually, you could write any sort of destination plugin for this - if you want Drupal to migrate data into some crazy exotic system, you can do it! But in 99.9% of cases you&rsquo;re migrating into Drupal entities, so you&rsquo;ll want <code>entity:something</code> here. Don&rsquo;t worry about bundles (content types) here; that&rsquo;s something we take care of in field mapping.</p>
<p><strong>Process</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">process</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">slug</span>: <span style="color:#ae81ff">stop-waiting-for-feeds-module-how-to-import-remote-feeds-in-drupal-8</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">title</span>: <span style="color:#ae81ff">title</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">field_remote_url</span>: <span style="color:#ae81ff">link</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">body</span>: <span style="color:#ae81ff">summary</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">created</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">plugin</span>: <span style="color:#ae81ff">format_date</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">from_format</span>: <span style="color:#e6db74">&#39;D, d M Y H:i:s O&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">to_format</span>: <span style="color:#e6db74">&#39;U&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">source</span>: <span style="color:#ae81ff">pub_date</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">status</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">plugin</span>: <span style="color:#ae81ff">default_value</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">default_value</span>: <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">type</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">plugin</span>: <span style="color:#ae81ff">default_value</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">default_value</span>: <span style="color:#ae81ff">podcast_episode</span>
</span></span></code></pre></div><p>This is where the action happens: the process section describes how destination fields should get their data from the source. It&rsquo;s the &ldquo;field mapping&rdquo;, and more. Each key is a destination field, each value describes where the data comes from.</p>
<p>If you don&rsquo;t want to migrate the whole field exactly as it&rsquo;s presented in the source, you can put individual fields through <a href="https://www.drupal.org/docs/8/api/migrate-api/migrate-process-plugins">Migrate plugins</a>. These plugins apply all sorts of changes to the source content, to get it into the shape Drupal needs for a field value. If you want to take a substring from the source, explode it into an array, extract one array value and make sure it&rsquo;s a valid Drupal machine name, you can do that here. I won&rsquo;t do it in my example because that sort of thing isn&rsquo;t common for RSS feeds, but it&rsquo;s definitely possible.</p>
<p>The examples of plugins that you see here are simple ones. <code>status</code> and <code>type</code> show you how to set a fixed field value. There are other ways, but the <code>default_value</code> plugin is the best way to keep your sanity.</p>
<p>The <code>created</code> field is a bit more interesting. The Drupal field is a unix timestamp of the time a node was authored. The source RSS uses a string time format, though. We&rsquo;ll use the <code>format_date</code> plugin to convert between the two. Neat, eh?</p>
<p>Don&rsquo;t forget to map values into Drupal&rsquo;s <code>status</code> and <code>type</code> fields! <code>type</code> is especially important: that&rsquo;s what determines the content type, and nodes can&rsquo;t be saved without it!</p>
<h2 id="thats-it">That&rsquo;s it?</h2>
<p>Yes, that&rsquo;s it. You now have a migrator that pulls from any kind of remote source, and creates Drupal entities out of the items it finds. Your system cron entry makes sure this runs on a regular schedule, rather than overloading Drupal&rsquo;s cron.</p>
<p>More importantly, if you&rsquo;re this comfortable with Migrate module, you&rsquo;ve just gained a <em>lot</em> of new power. This is a framework for getting data from anywhere, to anywhere, with a lot of convenience functionality in between.</p>
<p>Happy feeding!</p>
<h2 id="tips-and-tricks">Tips and tricks</h2>
<p>OK I lied, there is way more to say about Migrate. It&rsquo;s a wonderful, extensible framework, and that means there are lots of options for you. Here are some of the obstacles and solutions I&rsquo;ve found helpful.</p>
<p><strong>Importing files</strong></p>
<p>Did you notice that I didn&rsquo;t map the images into Drupal fields in my example? That&rsquo;s because it&rsquo;s a bit confusing. We actually have an image URL that we need to download, then we have to create a file entity based on the downloaded file, and then we add the File ID to the node&rsquo;s field as a value. That&rsquo;s more complicated than I wanted to get into in the general example.</p>
<p>To do this, we have to create a pipeline of plugins that will operate in sequence, to create the value we want to stick in our field_image.  It looks something like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span>  <span style="color:#f92672">field_image</span>:
</span></span><span style="display:flex;"><span>    -
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">plugin</span>: <span style="color:#ae81ff">download</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">source</span>:
</span></span><span style="display:flex;"><span>        - <span style="color:#ae81ff">image</span>
</span></span><span style="display:flex;"><span>        - <span style="color:#ae81ff">constants/destination_uri</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">rename</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>    -
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">plugin</span>: <span style="color:#ae81ff">entity_generate</span>
</span></span></code></pre></div><p>Looking at that download plugin, <em>image</em> seems clear. That&rsquo;s the source URL we got out of the RSS feed. But what is <em>constants/destination_uri</em>, I hear you cry? I&rsquo;m glad you asked. It&rsquo;s a constant, which I added in the source section and didn&rsquo;t tell you about. You can add any arbitrary keys to the source section, and they&rsquo;ll be available like this in processing. It is good practice to lump all your constants together into one key, to keep the namespace clean. This is what it looks like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">source</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">... usual source stuff here ...</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">constants</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">destination_uri</span>: <span style="color:#e6db74">&#39;public://my_rss_feed/post.jpg&#39;</span>
</span></span></code></pre></div><p>Before you ask, yes this is exactly the same as using the <code>default_value</code> plugin. Still, <code>default_value</code> is preferred for readability wherever possible. In this case it isn&rsquo;t really possible.</p>
<p>Also, note that the download plugin lets me set <code>rename: true</code>. This means that in case of a name conflict, a _0, _1, _2, _3 etc will be added to the end of the filename.</p>
<p>You can see the whole structure here, of one plugin passing its result to the next. You can chain unlimited plugins together this way&hellip;</p>
<p><strong>Multiple interrelated migrations</strong></p>
<p>One of the coolest tricks that Migrate can do is to manage interdependencies between migrations. Maybe you don&rsquo;t want those images just as File entities, you actually want them in Paragraphs, which should appear in the imported node. Easy-peasy.</p>
<p>First, you have to create a second migration for the Paragraph. Technically you should have a separate Migration YAML for each destination entity type. (yes, <code>entity_generate</code> is a dirty way to get around it, use it sparingly). So we create our second migration just for the paragraph, like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">id</span>: <span style="color:#ae81ff">my_rss_images_importer</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">label</span>: <span style="color:#e6db74">&#39;Import the images from my RSS feed&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">status</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">source</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">plugin</span>: <span style="color:#ae81ff">url</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">data_fetcher_plugin</span>: <span style="color:#ae81ff">http</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">urls</span>: <span style="color:#e6db74">&#39;https://example.com/feed.rss&#39;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">data_parser_plugin</span>: <span style="color:#ae81ff">simple_xml</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">item_selector</span>: <span style="color:#ae81ff">/rss/channel/item</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">fields</span>:
</span></span><span style="display:flex;"><span>    -
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">name</span>: <span style="color:#ae81ff">guid</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">label</span>: <span style="color:#ae81ff">GUID</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">selector</span>: <span style="color:#ae81ff">guid</span>
</span></span><span style="display:flex;"><span>    -
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">name</span>: <span style="color:#ae81ff">image</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">label</span>: <span style="color:#ae81ff">Image</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">selector</span>: <span style="color:#e6db74">&#39;itunes:image[&#39;&#39;href&#39;&#39;]&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">ids</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">guid</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">type</span>: <span style="color:#ae81ff">string</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">constants</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">destination_uri</span>: <span style="color:#e6db74">&#39;public://my_rss_feed/post.jpg&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">destination</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">plugin</span>: <span style="color:#e6db74">&#39;entity:paragraph&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">process</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">type</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">plugin</span>: <span style="color:#ae81ff">default_value</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">default_value</span>: <span style="color:#ae81ff">podcast_image</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">field_image</span>:
</span></span><span style="display:flex;"><span>    -
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">plugin</span>: <span style="color:#ae81ff">download</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">source</span>:
</span></span><span style="display:flex;"><span>        - <span style="color:#ae81ff">image</span>
</span></span><span style="display:flex;"><span>        - <span style="color:#ae81ff">constants/destination_uri</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">rename</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>    -
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">plugin</span>: <span style="color:#ae81ff">entity_generate</span>
</span></span></code></pre></div><p>If you look at that closely, you&rsquo;ll see it&rsquo;s a simpler version of the node migration we did at first. I did the copy pasting myself! Here are the differences:</p>
<ul>
<li>Different ID and label (duh)</li>
<li>We only care about two &ldquo;fields&rdquo; on the source: GUID and the image URL.</li>
<li>The destination is a paragraph instead of a node.</li>
<li>We&rsquo;re doing the image trick I just mentioned.</li>
</ul>
<p>Now, in the node migration, we can add our paragraphs field to the &ldquo;process&rdquo; section like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span>  <span style="color:#f92672">field_paragraphs</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">plugin</span>: <span style="color:#ae81ff">migration_lookup</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">migration</span>: <span style="color:#ae81ff">my_rss_images_importer</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">source</span>: <span style="color:#ae81ff">guid</span>
</span></span></code></pre></div><p>We&rsquo;re using the <code>migration_lookup</code> plugin. This plugin takes the value of the field given in <code>source</code>, and looks it up in <code>my_rss_images_importer</code> to see if anything with that source ID was migrated. Remember where we configured the source plugin to know that <code>guid</code> was the unique identifier for each item in this feed? That comes in handy here.</p>
<p>So we pass the guid to <code>migration_lookup</code>, and it returns the id of the paragraph which was created for that guid. It finds out what Drupal entity ID corresponds to that source ID, and returns the Drupal entity ID to use as a field value. You can use this trick to associate content migrated from separate feeds, totally separate data sources, or whatever.</p>
<p>You should also add a dependency on <code>my_rss_images_importer</code> at the bottom of your YAML file, like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">migration_dependencies</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">required</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">my_rss_images_importer</span>
</span></span></code></pre></div><p>This will ensure that <code>my_rss_images_importer</code> will always run before <code>my_rss_importer</code>.</p>
<p>(NB: in Drupal &lt; 8.3, this plugin is called <code>migration</code>)</p>
<p><strong>Formatting dates</strong></p>
<p>Very often you will receive dates in a format other than what Drupal wants to accept as a valid field value. In this case the <code>format_date</code> process plugin comes in very handy, like this:</p>
<pre tabindex="0"><code>  field_published_date:
    plugin: format_date
    from_format: &#39;D, d M Y H:i:s O&#39;
    to_format: &#39;Y-m-d\TH:i:s&#39;
    source: pub_date
</code></pre><p>This one is pretty self-explanatory: from format, to format, and source. This is important when migrating from Drupal 6, whose date fields store dates differently from 8. It&rsquo;s also sometimes handy for RSS feeds. :)</p>
<p><strong>Drush commands</strong></p>
<p>Very important for testing, and the whole reason we have <code>migrate_plus</code> module installed! Here are some handy drush commands for interacting with your migration:</p>
<ul>
<li><code>drush ms</code>: Gives you the status of all known migrations. How many items are there to import? How many have been imported? Is the import running?</li>
<li><code>drush migrate-rollback</code>: Rolls back one or more migrations, deleting all the imported content.</li>
<li><code>drush migrate-messages</code>: Get logged messages for a particular migration.</li>
<li><code>drush mi</code>: Runs a migration. use <code>--all</code> to run them all. Don&rsquo;t worry, Migrate will sort out any dependencies you&rsquo;ve declared and run them in the right order. Also worth noting: <code>--limit=10</code> does a limited run of 10 items, and <code>--feedback=10</code> gives you an in-progress status line every 10 items (otherwise you get nothing until it&rsquo;s finished!).</li>
</ul>
<p>Okay, now that&rsquo;s really it. Happy feeding!</p>
<p><img src="/images/feed-me-seymour.gif" alt="&amp;ldquo;Feed me, Seymour!&amp;rdquo;"></p>
]]></content>
    </entry>
  <entry>
    <title type="html"><![CDATA[Stay for community]]></title>
    <link href="https://ohthehugemanatee.org/blog/2017/03/30/stay-for-community/"/>
    <id>https://ohthehugemanatee.org/blog/2017/03/30/stay-for-community/</id>
    <author>
      <name>Campbell Vertesi (ohthehugemanatee)</name>
    </author>
    <published>2017-03-30T12:22:11+00:00</published>
    <updated>2017-03-30T12:22:11+00:00</updated>
    <content type="html"><![CDATA[<p>The <a href="https://www.garfieldtech.com/blog/tmi-outing">Crellpocalypse</a> in the Drupal world last week has shaken the entire community. This event and its handling have called our fundamental values and structures into question. We&rsquo;ve had <a href="https://www.reddit.com/r/drupal/comments/60y9mq/larry_garfield_on_harassment_in_the_drupal_project/">fights on social media</a>, calls for <a href="https://mikkel.hoegh.org/2017/03/23/vote-no-confidence-drupal-association-leadership">Dries to step down</a>, and valuable contributors <a href="https://janezurevc.name/time-take-some-time-drupal-community">stepping away from the community</a>. I have friends on every side of the situation, but all I can think is: <strong>This seems like the perfect time for a singing, dancing, spandexed pageant about the Drupal community.</strong></p>
<p><img src="/images/drupalcon-la.jpg" alt="Twelve years of code, and singing the Drupalcon song with Dries and Larry is still one of my favorite memories."></p>
<p><strong>Why?</strong> For those who don&rsquo;t know, I&rsquo;m one of the authors of the <a href="https://www.youtube.com/playlist?list=PLjVW3kqu-3e_Q41ETbML6RfbRssEdVvC4">DrupalCon Prenote</a>, the &ldquo;pre-keynote&rdquo; show that kicks off DrupalCon right before Dries&rsquo; keynote. The organizer (and my officemate), Jeffrey A. &ldquo;jam&rdquo; McGuire and I have been living our own special version of the crisis (<strong>Read Jam&rsquo;s post about taking sides on this <a href="https://medium.com/@horncologne/drupal-im-taking-sides-f46194122a05">here</a></strong>). Our friend Larry Garfield has been an enthusiastic part of the Prenote ever since his first appearance as &ldquo;Lord Over-Engineering&rdquo; <a href="https://www.youtube.com/watch?v=i5bW41KYUE0&amp;list=PLjVW3kqu-3e_Q41ETbML6RfbRssEdVvC4&amp;index=20">at Drupalcon Austin</a>. Dries has often played a special guest role, too. With Drupalcon Baltimore looming on the horizon, everything seems to be coming together in one awful moment full of painful reminders - and it&rsquo;s just when we&rsquo;re supposed to be cheering for &ldquo;community.&rdquo; That awful conjunction is what makes this next Prenote in Baltimore more important than ever.</p>
<p>I have a tremendous respect for how painful this whole situation is for everyone involved. This very public meltdown, which has already done tremendous material damage, is made even more painful by the personal friendships of the key people involved. Klaus, Dries, and Larry have been colleagues for more than a decade. Even if this was only a private falling out, it would have been a painful one. And this is a public explosion. I can&rsquo;t imagine the emotional strain that each of them is under right now. Internet mob outrage is a terrible experience, made much worse when it comes from your friends and colleagues, directed at your friends and colleagues.</p>
<p><strong>And this is exactly why we need a Prenote right now.</strong> Because this is terrible shit that we&rsquo;re wading through, and the Prenote exists to remind us of why we should keep going. The Drupal community - not the specific leadership, but the agglomeration of people, practices, code, and rules - has a lot that&rsquo;s worth fighting for. We are the largest open source software community in the world, with a uniquely personal connection to its members. An incredible diversity of contributors from every culture imaginable who, for the most part, manage to work very well together.</p>
<p><strong>The Drupal community is on the leading edge of how a community of this size and diversity can work.</strong>  No one has ever done this before. Things like our <a href="https://www.drupal.org/dcoc">Code of Conduct</a>, <a href="https://www.drupal.org/governance/community-working-group">Community Working Group</a>, and <a href="https://www.drupal.org/conflict-resolution">conflict resolution process</a>, can seem like established and unassailable systems. They aren&rsquo;t. Go read the version history of those links; we just get a group of people together at a Drupalcon or on video conference to try to figure out how to handle this stuff, and then codify it in writing. We take models from other kinds of communities and try to adapt them, we suggest crazy new ideas and directions. <strong>As a community, Drupal actively and aggressively tries to figure out how to make itself more diverse, and less conflict prone.</strong> Humanity has never done collaborative communities on this scale before, and the Drupal Community is on the bleeding edge of it all.</p>
<p>The cost of the bleeding edge is that we make mistakes. We set off conflicts, we discover new kinds of obstacles. We muddle through every time, and then in retrospect try to find a better way forward for next time. I don&rsquo;t mean to diminish the size or importance of any of these conflicts. They can be serious, existential crises.</p>
<ul>
<li><a href="http://buytaert.net/acquia-my-drupal-startup">When Acquia first formed</a> and started to hold outsize influence, it was an existential crisis. We had to figure out how to handle a conflict of interest in our leadership, and what to do about a (then) totally asymmetrical services market. Acquia is now just one large player of several in the Drupal marketplace, and Dries found a compromise between his interests that has lasted almost a decade.</li>
<li>When <a href="http://www.jenlampton.com/blog/introducing-backdrop-cms-drupal-fork">Nate and Jen forked Drupal</a> into <a href="https://backdropcms.org/">Backdrop CMS</a>, it presented another existential crisis for our community. We had never had such a credible fork from such key community members before. It was the apex of a crisis in the development direction for the whole project. We had to figure out how to address developer experience, how to work with a forked project, and even how to continue working with the forkers themselves. Backdrop is now a normal part of the ecosystem; Jenn and Nate remain important and welcomed Drupal community leaders almost four years later.</li>
<li>We have had critical tensions, messy relationships, and fallings out with some of our most appreciated developers and community leaders. Whether it&rsquo;s offense taken at <a href="https://web-beta.archive.org/web/20151105173458/http://morten.dk/blog/language-twitter-misunderstanding-drupal-community">Morten</a>, or outbursts from <a href="https://www.reddit.com/r/drupal/comments/5e8dcd/a_fundamental_cultural_shift_in_drupal_or_my/">Chx</a>, these have divided our community and forced us to solve diversity problems that no one else has ever had to deal with.</li>
</ul>
<p>I could go on. The point is: With each crucible, we the Drupal community must try to learn and build better systems for the next time.</p>
<p>So right now, in the midst of all this anger, this prejudice, and these accusations, I&rsquo;m here to say: <strong>we will learn from this, too.</strong> The Drupal community is extraordinary, but we must adapt in order to survive. Losing Larry is a big hit to our community in almost every dimension. This public explosion has been a big hit to us in almost every other dimension. The arguments and animosities we&rsquo;ve unleashed feel like they will tear us apart. But we must look forward. We must use this event for introspection and carry on as a better, improved community.</p>
<p><em>Do you think Larry was punished for thoughtcrime?</em> Pitch in and help build a system where the next Larry can&rsquo;t be treated that way. <em>Do you think Dries and the DA deserve our trust in their decision?</em> Join up and help make sure the next iteration preserves the strength of independent leadership.</p>
<p>The prenote is about why we are here, why we&rsquo;ve stayed here all these years. Because it&rsquo;s fun, because it&rsquo;s supportive, because we love it. Sometimes the best way to start addressing your pain is through humor - and we desperately need to start addressing this.</p>
<p>However you feel about the Crellpocalypse, please don&rsquo;t leave. Not yet. Stay, and help the community improve. Don&rsquo;t stay for your job. Don&rsquo;t stay for Dries, or the DA, or Larry. Stay for the community.</p>
<p><strong><a href="https://events.drupal.org/baltimore2017/balti-more-prenote-balti-most-fun-drupalcon">I&rsquo;ll see you at the Prenote.</a></strong></p>
<p><img src="/images/DrupalConAsia-2.jpg" alt="The Prenote: The most fun you can have at Drupalcon."></p>
]]></content>
    </entry>
  <entry>
    <title type="html"><![CDATA[What Crell doesn&#39;t want you to know: how to automate letsencrypt on platform.sh]]></title>
    <link href="https://ohthehugemanatee.org/blog/2017/02/21/what-crell-doesnt-want-you-to-know-how-to-automate-letsencrypt-on-platform-dot-sh/"/>
    <id>https://ohthehugemanatee.org/blog/2017/02/21/what-crell-doesnt-want-you-to-know-how-to-automate-letsencrypt-on-platform-dot-sh/</id>
    <author>
      <name>Campbell Vertesi (ohthehugemanatee)</name>
    </author>
    <published>2017-02-21T22:33:08+00:00</published>
    <updated>2017-02-21T22:33:08+00:00</updated>
    <content type="html"><![CDATA[<p>If you believe the <a href="https://docs.platform.sh/development/going-live.html#prerequisites">docs</a> and the <a href="https://twitter.com/damz/status/672559665377501184">twitters</a>, there is no way to automate <a href="https://letsencrypt.org/">letsencrypt</a> certificates updates on <a href="https://platform.sh/">platform.sh</a>. You have to create the certificates manually, upload them manually, and maintain them manually.</p>
<p>But as readers of this blog know, the docs are only the start of the story. I&rsquo;ve really enjoyed working with platform.sh with one of my private clients, and I couldn&rsquo;t believe that with all the flexibility - all the POWER - letsencrypt was really out of reach. I found a few attempts to script it, and one really great <a href="https://gitlab.com/snippets/27467">snippet on gitlab</a>. But no one had ever really synthesized this stuff into an easy howto. So here we go.</p>
<h3 id="1-add-some-writeable-directories-where-platformsh-cli-and-letsencrypt-need-them">1) Add some writeable directories where platform.sh CLI and letsencrypt need them.</h3>
<p>Normally when Platform deploys your application, it puts it all in a read-only filesystem. We&rsquo;re going to mount some special directories read-write so all the letsencrypt/platform magic can work.</p>
<p>Edit your application&rsquo;s <code>.platform.app.yaml</code> file, and find the <code>mounts:</code> section. At the bottom, add these three lines. Make sure to match the indents with everything else under the <code>mounts:</code> section!</p>
<pre tabindex="0"><code>    &#34;/web/.well-known&#34;: &#34;shared:files/.well-known&#34;
    &#34;/keys&#34;: &#34;shared:files/keys&#34;
    &#34;/.platformsh&#34;: &#34;shared:files/.platformsh&#34;
</code></pre><p>Let&rsquo;s walk through each of these:</p>
<ul>
<li>/web/.well-known: In order to confirm that you actually control example.com, letsencrypt drops a file somewhere on your website, and then tries to fetch it. This directory is where it&rsquo;s going to do the drop and fetch. My webroot is <code>web</code>, you should change this to match your own environment. You might use <code>public</code> or <code>www</code> or something.</li>
<li>/keys: You have to store your keyfiles SOMEWHERE. This is that place.</li>
<li>/.platformsh: Your master environment needs a bit of configuration to be able to login to platform and update the certs on your account. This is where that will go.</li>
</ul>
<h3 id="2-expose-the-well-known-directory-to-the-internet">2) Expose the .well-known directory to the Internet</h3>
<p>I mentioned above that letsencrypt test your control over a domain by creating a file which it tries to fetch over the Internet. We already created the writeable directory where the scripts can drop the file, but platform.sh (wisely) defaults to hide your directories from the Internet. We&rsquo;re going to add some configuration to the &ldquo;web&rdquo; app section to expose this .well-known directory. Find the <code>web:</code> section of your <code>.platform.app.yaml</code> file, and the <code>locations:</code> section under that. At the bottom of that section, add this:</p>
<pre tabindex="0"><code>      &#39;/.well-known&#39;:
            # Allow access to all files in the public files directory.
            allow: true
            expires: 5m
            passthru: false
            root: &#39;web/.well-known&#39;
            # Do not execute PHP scripts.
            scripts: false
</code></pre><p>Make sure you match the indents of the other location entries! In my (default) <code>.platform.app.yaml</code> file, I have 8 spaces before that <code>'/.well-known':</code> line. Also note that the <code>root:</code> parameter there also uses my webroot directory, so adjust that to fit your environment.</p>
<h3 id="3-download-the-binaries-you-need-during-the-application-build-phase">3) Download the binaries you need during the application &ldquo;build&rdquo; phase</h3>
<p>In order to do this, we&rsquo;re going to need to have the platform.sh CLI tool, and a let&rsquo;s encrypt CLI tool called lego. We&rsquo;ll download them during the &ldquo;build&rdquo; phase of your application. Still in the <code>platform.app.yaml</code> file, find the <code>hooks:</code> section, and the <code>build:</code> section under that. Add these steps to the bottom of the build:</p>
<pre tabindex="0"><code>      cd ~
      curl -sL https://github.com/xenolf/lego/releases/download/v0.3.1/lego_linux_amd64.tar.xz | tar -C .global/bin -xJ --strip-components=1 lego/lego
      curl -sfSL -o .global/bin/platform.phar https://github.com/platformsh/platformsh-cli/releases/download/v3.12.1/platform.phar
</code></pre><p>We&rsquo;re just downloading reasonably recent releases of our two tools. If anyone has a better way to get the latest release of either tool, please let me know. Otherwise we&rsquo;re stuck keeping this up to date manually.</p>
<h3 id="4-configure-the-platformsh-cli">4) Configure the platform.sh CLI</h3>
<p>In order to configure the platform.sh CLI on your server, we have to deploy the changes from steps 1-3. Go ahead and do that now. I&rsquo;ll wait.</p>
<p>Now connect to your platform environment via SSH (<code>platform ssh -e master</code> for most of us). First we&rsquo;ll add a config file for platform. Edit a file in <code>.platformsh/config.yaml</code> with the editor of choice. You don&rsquo;t have to use vi, but it will win you some points with me. Here are the contents for that file:</p>
<pre tabindex="0"><code>updates:
    check: false
api:
    token_file: token
</code></pre><p>Pretty straightforward: this tells platform not to bother updating the CLI tool automatically (it can&rsquo;t - read-only filesystem, remember?). It then tells it to login using an API token, which it can find in the file <code>.platformsh/token</code>. Let&rsquo;s create that file next.</p>
<p>Log into the platform.sh web UI (you can launch it with <code>platform web</code> if you&rsquo;re feeling sassy), and navigate to your account settings &gt; api tokens. That&rsquo;s at <code>https://accounts.platform.sh/user/12345/api-tokens</code> (with your own user ID of course). Add an API token, and copy its value into <code>.platformsh/token</code> on the environment we&rsquo;re working on. The token should be the only contents of that file.</p>
<p>Now let&rsquo;s test it by running <code>php /app/.global/bin/platform.phar auth:info</code>. If you see your account information, congratulations! You have a working platform.sh CLI installed.</p>
<h3 id="5-request-your-first-certificate-by-hand">5) Request your first certificate by hand</h3>
<p>Still SSH&rsquo;ed into that environment, let&rsquo;s see if everything works.</p>
<pre tabindex="0"><code>lego --email=&#34;support@example.com&#34; --domains=&#34;www.example.com&#34; --webroot=/app/public/ --path=/app/keys/ -a run
csplit -f /app/keys/certificates/www.example.com.crt- /app/keys/certificates/www.example.com.crt &#39;/-----BEGIN CERTIFICATE-----/&#39; &#39;{1}&#39; -z -s
php /app/.global/bin/platform.phar domain:update -p $PLATFORM_PROJECT --no-wait --yes --cert /app/keys/certificates/www.example.com.crt-00 --chain /app/keys/certificates/www.example.com.crt-01 --key /app/keys/certificates/www.example.com.key example.com
</code></pre><p>This is three commands: register the cert with letsencrypt, then split the resulting file into it&rsquo;s components, then register those components with platform.sh. If you didn&rsquo;t get any errors, go ahead and test your site - it&rsquo;s got a certificate! (yay)</p>
<h3 id="6-set-up-automatic-renewals-on-cron">6) Set up automatic renewals on cron</h3>
<p>Back to <code>.platform.app.yaml</code>, look for the <code>crons:</code> section. If you&rsquo;re running drupal, you probably have a drupal cronjob in there already. Add this one at the bottom, matching indents as always.</p>
<pre tabindex="0"><code>    letsencrypt:
        spec: &#39;0 0 1 * *&#39;
        cmd: &#39;/bin/sh /app/scripts/letsencrypt.sh&#39;
</code></pre><p>Now let&rsquo;s create the script. Add the file <code>scripts/letsencrypt.sh</code> to your repo, with this content:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Checks and updates the letsencrypt HTTPS cert.</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>set -e
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;</span>$PLATFORM_ENVIRONMENT<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;master-7rqtwti&#34;</span> <span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Renew the certificate</span>
</span></span><span style="display:flex;"><span>    lego --email<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;example@example.org&#34;</span> --domains<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;example.org&#34;</span> --webroot<span style="color:#f92672">=</span>/app/web/ --path<span style="color:#f92672">=</span>/app/keys/ -a renew
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Split the certificate from any intermediate chain</span>
</span></span><span style="display:flex;"><span>    csplit -f /app/keys/certificates/example.org.crt- /app/keys/certificates/example.org.crt <span style="color:#e6db74">&#39;/-----BEGIN CERTIFICATE-----/&#39;</span> <span style="color:#e6db74">&#39;{1}&#39;</span> -z -s
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Update the certificates on the domain</span>
</span></span><span style="display:flex;"><span>    php /app/.global/bin/platform.phar domain:update -p $PLATFORM_PROJECT --no-wait --yes --cert /app/keys/certificates/example.org.crt-00 --chain /app/keys/certificates/example.org.crt-01 --key /app/keys/certificates/example.org.key example.org
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fi</span>
</span></span></code></pre></div><p>Obviously you should replace all those <code>example.org</code>s and email addresses with your own domain. Make the file executable with <code>chmod u+x scripts/letsencrypt.sh</code>, commit it, and push it up to your platform.sh environment.</p>
<h3 id="7-send-a-bragging-email-to-crell">7) Send a bragging email to Crell</h3>
<p>Technically this isn&rsquo;t supposed to be possible, but YOU DID IT! Make sure to rub it in.</p>
<p><img src="/images/larry-garfield.jpg" alt="&amp;ldquo;Larry is waiting to hear from you. (photo credit Jesus Manuel Olivas)&amp;rdquo;"></p>
<p>Good luck!</p>
<p>PS - I&rsquo;m just gonna link one more time to the guy whose snippet made this all possible: <a href="https://www.drupal.org/u/hanoii">Ariel Barreiro</a> did the hardest part of this. I&rsquo;m grateful that he made his notes public!</p>
]]></content>
    </entry>
  <entry>
    <title type="html"><![CDATA[Between the cracks of decoupled (Drupal) architecture]]></title>
    <link href="https://ohthehugemanatee.org/blog/2017/02/11/a-year-between-the-cracks-of-decoupled-drupal/"/>
    <id>https://ohthehugemanatee.org/blog/2017/02/11/a-year-between-the-cracks-of-decoupled-drupal/</id>
    <author>
      <name>Campbell Vertesi (ohthehugemanatee)</name>
    </author>
    <published>2017-02-11T11:18:44+00:00</published>
    <updated>2017-02-11T11:18:44+00:00</updated>
    <content type="html"><![CDATA[<p>In any decoupled architecture, people tend to focus on the pieces that will fit together. But what nobody ever tells you is: <em>watch out for the cracks!</em></p>
<p>The cracks are the integration points between the different components. It&rsquo;s not GraphQL as a communication layer; it&rsquo;s that no one thinks to log GraphQL inconsistencies when they occur. It&rsquo;s not &ldquo;what&rsquo;s my development environment&rdquo;, it&rsquo;s &ldquo;how do these three development environments work on my localhost at the same time?&rdquo;. It&rsquo;s the thousand little complexities that you don&rsquo;t think about, basically because they aren&rsquo;t directly associated with a noun. We&rsquo;ve discovered &ldquo;crack&rdquo; problems like this in technical architecture and devops, communication, and even project management. They add up to a lot of unplanned time, and they have presented some serious project risks.</p>
<p>A bit more about my recent project with <a href="https://amazeelabs.com">Amazee Labs</a>. It&rsquo;s quite a cool stack: several data sources feed into <a href="https://drupal.org">Drupal 8</a>, which offers an editorial experience and <a href="https://graphql.org">GraphQL</a> endpoints. Four <a href="https://facebook.github.io/react/">React</a>/<a href="https://facebook.github.io/relay/">Relay</a> sites sit in front, consuming the data and even offering an authenticated user experience (<a href="https://auth0.com">Auth0</a>). I&rsquo;ve been working with brilliant people: <a href="https://www.drupal.org/u/fubhy">Sebastian Siemssen</a>, <a href="https://www.drupal.org/u/moshe-weitzman">Moshe Weitzman</a>, <a href="https://github.com/pmelab">Philipp Melab</a>, and others. It has taken all of us to deal with the crack complexity.</p>
<p>The first crack appeared as we were setting up environments for our development teams. How do you segment repositories? They get deployed to different servers, and run in very different environments. But they are critically connected to each other. We decided to have a separate &ldquo;back end&rdquo; repo, and separate repos for each &ldquo;front end&rdquo; site. Since Relay needs to compile the entire data schema on startup, this means that every time the back end is redeployed with a data model change, we have to automatically redeploy the front end(s). For local development, we ended up building a mock data backend in MongoDB running in Docker. Add one more technology to support to your list, with normal attendant support and maintenance issues.</p>
<p>DevOps in general is more complicated and expensive in a decoupled environment. It&rsquo;s all easy at first, but at some point you have to start connecting the front- and back-ends on peoples&rsquo; local development environments. Cue obvious problems like port conflicts, but also less obvious ones. The React developers don&rsquo;t know anything about drupal, drush, or php development environments. This means your enviroment setup needs to be VERY streamlined, even idiot-proof. Your devops team has to support a much wider variety of users than normal. Two of our front-enders had setups that made spinning up the back-end take more than 30 minutes. 30 minutes! We didn&rsquo;t even know that was possible with our stack.  The project coordinater has to budget significant time for this kind of support and maintenance.</p>
<p>Some of the cracks just mean you have to code <em>very</em> carefully. At one point we discovered that certain kinds of invalid schema are perfectly tolerable to the GraphQL module. We could query everything just fine - but React couldn&rsquo;t compile the schema, and gave cryptic errors that were hard to track down. Or what about the issues where there <em>are</em> no error messages to work with? CORS problems were notoriously easy to miss, until everything broke without clear errors. Some of these are impossible to avoid. The best you can do is be thorough about your test coverage, add integration tests which consider all environments, and <em>document all the things</em>.</p>
<p>Not all the cracks are technological; some are purely communication. In order to use a shared data service, we need a shared data model and API. So how do you communicate and coordinate that between 5 teams and 5 applications? We found this bottleneck extremely difficult. At first, it simply took a long time to get API components built. We had to coordinate so many stakeholders, that the back-end data arch and GraphQL endpoints got way behind the front-end sites. At another point, one backender organically became the go-to for everything GraphQL. He was a bottleneck within weeks, and was stuck with all the information silo&rsquo;ed in his head. This is still an active problem area for us. We&rsquo;re working on thorough and well-maintained documentation as a reference point, but this costs time as well.</p>
<p>Even project managers and scrum masters found new complexities. We had more than 30 people working on this project, and everyone had to be well coordinated and informed. You certainly can&rsquo;t do scrum with 30 people together - the sprint review would take days! But split it out into many smaller teams and your information and coordination problems just got much harder. Eventually we found our solution: we have 3 teams, each with their own PO, frontender(s) and backender(s), who take responsibility for whole features at a time. Each team does its own, quite vanilla, scrum process. Layered on top of this, developers are in groups which cut across the scrum teams, which have coordination meetings and maintain documentation and code standards. All the back-enders meet weekly and work with the same standards, but the tightest coordination is internal to a feature. So far this is working well, but ask me again in a few months. :)</p>
<p>Working in a fully decoupled architecture and team structure has been amazing. It really is possible, and it really does provide a lot more flexibility. But it demands a harder focus on standards, communication, coordination, and architecture. Sometimes it&rsquo;s not about the bricks; it&rsquo;s about the mortar between them. So the next time you start work on a decoupled architecture, <em>watch out for the cracks!</em></p>
]]></content>
    </entry>
  <entry>
    <title type="html"><![CDATA[Writing Drupal 8 code for Drupal 7]]></title>
    <link href="https://ohthehugemanatee.org/blog/2016/11/05/writing-drupal-8-code-for-drupal-7/"/>
    <id>https://ohthehugemanatee.org/blog/2016/11/05/writing-drupal-8-code-for-drupal-7/</id>
    <author>
      <name>Campbell Vertesi (ohthehugemanatee)</name>
    </author>
    <published>2016-11-05T12:05:50+00:00</published>
    <updated>2016-11-05T12:05:50+00:00</updated>
    <content type="html"><![CDATA[<p>A year ago I proposed a session for <a href="https://events.drupal.org/asia2016">Drupalcon Mumbai</a> and <a href="https://events.drupal.org/neworleans2016">Drupalcon New Orleans</a>, called <a href="https://events.drupal.org/neworleans2016/sessions/best-both-worlds-writing-drupal-8-code-drupal-7-sites">&ldquo;The best of both worlds&rdquo;</a>. It promised to show attendees how to write Drupal 8 code for Drupal 7 sites. I never ended up giving the session, but this week I got an email asking for more information. So in case it ever comes up again, here&rsquo;s my own collection of resources on the subject.</p>
<p>The big improvement that&rsquo;s hard for D7 developers to get used to is injected services. The <a href="https://www.drupal.org/project/service_container">service container module</a> makes that possible in D7. The brilliant <a href="https://www.drupal.org/u/fabianx">FabianX</a> wrote it to make his life easier in writing <a href="https://www.drupal.org/project/render_cache">render cache</a>, and his is always a good example to follow! This module creates a service container for D7, which you use just like the container in D8. You can write independent, OO code that is unit testable, with service dependencies declared in a YAML file. Note that you will also need the <a href="https://www.drupal.org/project/registry_autoload">registry autoload</a> module to get PS4 namespaced autoloading!</p>
<p>I just mentioned unit testable code as a benefit of the service container. To be honest this is a little tricksy in Drupal 7. For my own custom work I tend to isolate the test environment from the rest of Drupal, so I don&rsquo;t have to deal with everything else. Again, I followed Fabian&rsquo;s example there by looking at how <a href="http://cgit.drupalcode.org/render_cache/tree/tests?h=7.x-2.x">render cache does it&rsquo;s tests</a>. If you do want better integration, there is a good lullabot post that talks about (more) proper PHPUnit integration. <a href="https://www.lullabot.com/articles/write-unit-tests-for-your-drupal-7-code-part-1">https://www.lullabot.com/articles/write-unit-tests-for-your-drupal-7-code-part-1</a> .</p>
<p>Next on my list is Composer-managed dependencies. The Acquia developer blog has a great post about <a href="https://dev.acquia.com/blog/using-composer-manager-get-island-now">using Composer Manager for this in D7</a>. This is a huge win for a lot of custom modules, and very easy.</p>
<p>Last is plugins. The rest of this list is in no particular order, but I left plugins for last because I think this isn&rsquo;t actually necessary in D7. Personally I use modules&rsquo; own hooks and just autoload independent classes. You might consider using plugins instead if you&rsquo;re going to write several plugins for the same module. In any case, <a href="https://www.previousnext.com.au/blog/drupal-8-now-object-oriented-plugins-drupal-7">Lee Rowlands has the go-to blog post about this</a>.</p>
<p>All together, you can combine these approaches to write code for D7 with the biggest Dx features of D8: service injection, phpunit testing, composer libraries, and plugins. Note that each of these blog posts assumes different workarounds for all the other functionalities&hellip; but they should help you get an understanding of how to use that particular Dx improvement in 7.</p>
<p>When I wrote that session proposal, I thought of this as a good way for D7 developers to learn D8 practices gradually, one at a time. I no longer think that&rsquo;s true. Mostly, there are so few working examples of D7 code using these practices, that it&rsquo;s quite hard to get your stuff working. This is particularly hard when you&rsquo;re just learning about the concept in the first place! Personally, I could mess around with this stuff and make my life harder with it in D7. But I couldn&rsquo;t really get the best advantage out of them until I had better examples. My best learning aids were the examples in D8 core, and the code scaffolding available through Drush and Drupal console.</p>
<p>But now that I&rsquo;m comfortable with the concepts&hellip; I would absolutely use these approaches in D7 work. You know, if I&rsquo;m FORCED to work in the old system. :)</p>
<p>One last aside here: it is easy to fall into the mindset that Drupal 8 practices are better just because they&rsquo;re newer. This is simply not true. These practices are not handed down from heaven, after all! When you have the rest of the D8 architecture in place, certain kinds of code tasks are much easier. That&rsquo;s why we like developing for it so much more. But other (less common, IMO) tasks are harder. And doing any of this in D7 means you have to put the architecture in place, too. That&rsquo;s a lot of time, and it&rsquo;s only worthwhile if you&rsquo;re going to use the particular strengths of these practices.</p>
<p>So if it looks like one of these D8 practices will make your life easier for a particular task in D7, then by all means use these approaches to get there. Composer manager has a particularly low bar - it&rsquo;s so easy to use, and makes so many tasks easier, it&rsquo;s a good approach to many tasks. But if I ever catch you implementing service container to get two lines of code into a form_alter, I will come to where you work and slap your hands off the keyboard.</p>
<p>Happy coding!</p>
]]></content>
    </entry>
  <entry>
    <title type="html"><![CDATA[Drupal 8 RC 1 is out! What now?]]></title>
    <link href="https://ohthehugemanatee.org/blog/2015/10/08/drupal-8-rc-1-is-out-what-now/"/>
    <id>https://ohthehugemanatee.org/blog/2015/10/08/drupal-8-rc-1-is-out-what-now/</id>
    <author>
      <name>Campbell Vertesi (ohthehugemanatee)</name>
    </author>
    <published>2015-10-08T11:16:02+00:00</published>
    <updated>2015-10-08T11:16:02+00:00</updated>
    <content type="html"><![CDATA[<p>Last night (my time) I got the good news over twitter:</p>
<!-- raw HTML omitted -->
<p>That&rsquo;s right, Drupal 8 has it&rsquo;s first release. But what does that mean? Is it done? Can I start using it yet? What kind of changes are coming? Will dawehner get to sleep, at last?</p>
<h2 id="are-we-there-yet">Are we there yet?</h2>
<p>Despite all the rejoicing on social media, this isn&rsquo;t the final release for Drupal 8 - it&rsquo;s only the first Release Candidate. This means that we have (officially!) 0 &ldquo;critical&rdquo; bugs left to fix in Drupal 8. That means exactly what it sounds like: there are no critical, world-ending bugs left&hellip; <em>that we know of</em>. Just like any software product, we&rsquo;ll continue to discover critical issues through its entire life cycle. We&rsquo;re still finding occasional critical issues in Drupal 7 almost five years since its first release candidate; that&rsquo;s just a part of supporting a piece of software over the long term. The RC phase means that while Drupal 8 is stable enough to use, we&rsquo;re still discovering critical bugs a little too frequently to recommend it for everyone, in every use case.</p>
<p>&ldquo;A little too frequently&rdquo; means that the rate of critical bugs incoming is still too high to be able to promise the fast respond-and-fix turnaround that we want. Every two weeks we&rsquo;ll create a new Release Candidate version that fixes whatever new criticals have been discovered. Once the core team is confident that they can squash bugs in a timely enough manner, they&rsquo;ll (finally) release Drupal version 8.0.0.</p>
<h2 id="but-when-will-it-really-be-released">But when will it REALLY be released?</h2>
<p>&ldquo;When it&rsquo;s ready&rdquo; still applies! But we are very, very close now. To give you a point of reference, Drupal 7 went through four Release Candidates before release (two months). That codebase was a lot more fragile than this one, so it&rsquo;s reasonable to hope that we&rsquo;ll have a very Drupally Christmas season this year. Personally I&rsquo;m betting on January.</p>
<!-- raw HTML omitted -->
<h2 id="can-i-use-it-yet">Can I use it yet?</h2>
<p><!-- raw HTML omitted --><em>Yes!</em><!-- raw HTML omitted --> <!-- raw HTML omitted -->Some terms and conditions apply.<!-- raw HTML omitted --></p>
<p>Just because there are no criticals left, doesn&rsquo;t mean that D8 is completely bug-free! We have <a href="https://www.drupal.org/project/issues/search/drupal?assigned=&amp;submitted=&amp;project_issue_followers=&amp;status%5B%5D=1&amp;status%5B%5D=13&amp;status%5B%5D=8&amp;status%5B%5D=14&amp;status%5B%5D=4&amp;priorities%5B%5D=300&amp;categories%5B%5D=1&amp;version%5B%5D=8.0.x-dev&amp;issue_tags_op=%3D&amp;issue_tags=">a big pile of known &ldquo;major&rdquo; issues</a> that have been deferred until after 8.0.0, which should impact your decision. You can see at that link that some of them are already ready to be committed. The catch is that during the RC phase, we aren&rsquo;t allowed to commit these fixes. <a href="https://www.drupal.org/core/d8-allowed-changes#rc">We&rsquo;re basically only allowed to work on criticals and documentation</a>. So there are still some serious issues that might be a problem in some use cases.</p>
<p>The biggest issue (that I know of) is <a href="https://www.drupal.org/node/2542868">a potential incompatibility between Drupal 8&rsquo;s new &ldquo;cache tags&rdquo; header and some hosting providers</a>. The problem is that Drupal includes some important caching information on the &ldquo;back of the envelope&rdquo; of its response to a page request, and it&rsquo;s possible to run out of envelope! If the cache tags header gets too long for the web host to handle, it can behave unpredictably. You might get white screens of death, or it might just shorten the cache tags header, removing important information. There&rsquo;s a solution in the works to allow a maximum length setting, but it won&rsquo;t make it in until 8.0.1 (two weeks after 8.0.0). In the meantime you should avoid D8 if you have any very complex pages with many elements. The examples in that ticket are good ones: a news site with very complex layouts, or a single page site with a lot of &ldquo;stuff&rdquo; crammed onto the one, front page.</p>
<p>The other &ldquo;gotcha&rdquo; to bear in mind is that it will take some time for Drupal&rsquo;s contributed modules ecosystem to catch up with the new version. According to <a href="http://www.bluespark.com/status-top-100-contributed-modules-drupal-8">Bluespark&rsquo;s status of the top 100 modules for D8</a> page, so far only 9 of the top 100 D7 modules have a D8 release marked &ldquo;stable.&rdquo; 19 of those top 100 modules are included in D8 core however, so our total count is up to 28. This is enough to give a good foundation for relatively simple sites, especially if you have some PHP skills under your belt. But I wouldn&rsquo;t go building a complex Intranet on it just yet!</p>
<h2 id="wait-so-its-still-busted">Wait, so it&rsquo;s still busted?</h2>
<p>No! Drupal 8 is a solid platform for most use cases - that&rsquo;s the point of the RC release! It&rsquo;s time to go ahead and use it for site builds. Just take it easy and use it for simple sites, first. Give the rest of the community a chance to release stable modules, and hold off on that Facebook-buster behemoth website you&rsquo;ve got planned until a few months after launch.</p>
<h2 id="what-happens-after-800">What happens after 8.0.0?</h2>
<p>After 8.0.0 is released, we will make an enormous, fundamental shift in how Drupal is developed. We will start using <a href="http://semver.org">semantic versioning</a> with a regular release schedule. Every two weeks we&rsquo;ll release a new &ldquo;patch level&rsquo; release: 8.0.1, 8.0.2, and so on. Patch level releases will be bug fixes only, and will be backwards-compatible - that means they won&rsquo;t break anything on your site. Approximately every 6 months, we&rsquo;ll release a new &ldquo;minor level&rdquo; release: 8.1.0, 8.2.0, etc. Minor releases are allowed to contain new features, but they are still guaranteed to be backwards-compatible. So even these releases won&rsquo;t break anything on your site. We&rsquo;re still <a href="">figuring out</a> the exact process for minor releases, but they will include similar phases to what we&rsquo;ve seen with D8 core: a beta phase, and release candidates until we&rsquo;re sure there are no more criticals.</p>
<p>What about API changes, and features that would break existing sites? We won&rsquo;t even start developing on those until well into the D8 life cycle. Those changes will belong in the 9.x branch, and will be kept completely separate from anything that could touch your site.</p>
<p>The key take-away here is that D8 updates should never break your site. They may add features, but they will not interfere with whatever you&rsquo;ve already built. We&rsquo;ll continue a regular pace of improving the product in a predictable, scheduled, and backwards-compatible way.</p>
<h2 id="where-are-the-best-drupal-8-release-parties">Where are the best Drupal 8 release parties?</h2>
<p>The Drupal Association is coordinating promotion for official Drupal 8 launch parties. If you want to host one, just <a href="https://assoc.drupal.org/drupal-8-launch-party">fill out their form</a> and they&rsquo;ll help you promote it! So far no one has built a site mapping the parties, but keep an eye out in the #drupal hashtag on twitter!</p>
<h2 id="who-do-i-congratulate-who-do-i-thank">Who do I congratulate? Who do I thank?</h2>
<p>Drupal 8 RC 1 is the combined effort of more than 3200 contributors. That is an incredible number. By comparison, Apache, the world&rsquo;s most popular open source webserver, has 118 contributors. MySQL, the database platform which runs an enormous portion of the Internet, has 1320 contributors. So you can basically walk up to anyone at a Drupalcon and thank him or her!</p>
<p>Most of the contributors to Drupal 8 leaned on the support, training, and hand-holding of mentors at Drupal events all over the world. I know I needed a mentor for my first core contributions, and I got to turn around and mentor other people myself. The mentors are the support network that made this level of mass contribution possible.</p>
<p>But the level of effort is definitely not evenly distributed. Most contributors have made fewer than 20 registered contributions. <a href="https://drupal.org/u/dawehner">But</a> <a href="https://drupal.org/u/tim.plunkett">some</a> <a href="https://drupal.org/u/berdir">people</a> <a href="https://drupal.org/u/alexpott">have</a> <a href="https://drupal.org/u/wim-leers">really</a> <a href="https://drupal.org/u/sun">gone</a> <a href="https://drupal.org/u/damiankloip">above</a> <a href="https://drupal.org/u/xjm">and</a> <a href="https://drupal.org/u/g%C3%A1bor-hojtsy">beyond</a> <a href="https://drupal.org/u/larowlan">what</a> <a href="https://drupal.org/u/chx">anyone</a> <a href="https://drupal.org/u/andypost">would</a> <a href="https://drupal.org/u/ameteescu">expect</a>. <a href="https://drupal.org/u/jhodgdon">It&rsquo;s</a> <a href="https://drupal.org/u/yched">no</a> <a href="https://drupal.org/u/joelpittet">exaggeration</a> <a href="https://drupal.org/u/effulgentsia">to</a> <a href="https://drupal.org/u/yesct">say</a> <a href="https://drupal.org/u/swentel">that</a> <a href="https://drupal.org/u/cottser">these</a> <a href="https://drupal.org/u/nod_">people</a> <a href="https://drupal.org/u/vijaycs85">have</a> <a href="https://drupal.org/u/pwolanin">shaped</a> <a href="https://drupal.org/u/aspilicious">the</a> <a href="https://drupal.org/u/tstoeckler">future</a> <a href="https://drupal.org/u/xano">of</a> <a href="https://drupal.org/u/plach">the</a> <a href="https://drupal.org/u/lewisnyman">Internet</a>.</p>
<p>It is easy to concentrate on the number of contributions as the only metric of involvement in the release of D8. But some of the biggest influences on Drupal 8 have been community leaders, whose effort is not counted in commits under their own names. The initiative leads who architected and directed all this contribution: <a href="https://drupal.org/u/heyrocker">heyrocker</a>, <a href="https://drupal.org/u/Senpai">Senpai</a>, <a href="https://drupal.org/u/jlambert">jlambert</a>, <a href="https://drupal.org/u/Crell">Crell</a>, <a href="https://drupal.org/u/dmitrig01">dmitrig01</a>, <a href="https://drupal.org/u/g%C3%A1bor-hojtsy">Gábor Hojtsy</a>, <a href="https://drupal.org/u/jose-reyero">Jose Reyero</a>, <a href="https://drupal.org/u/mitchell">mitchell</a>, <a href="https://drupal.org/u/jenlampton">jenlampton</a>, <a href="https://drupal.org/u/bleen18">bleen18</a>, <a href="https://drupal.org/u/jackalope">jackalope</a>, <a href="https://drupal.org/u/ericduran">ericduran</a>, <a href="https://drupal.org/u/jhood">jhood</a>, <a href="https://drupal.org/u/jacine">jacine</a>, <a href="https://drupal.org/u/shyamala">shyamala</a>, <a href="https://drupal.org/u/rupl">rupl</a>, <a href="https://drupal.org/u/johnalbin">JohnAlbin</a>, <a href="https://drupal.org/u/twom">twom</a>, and <a href="https://drupal.org/u/sofiya">sofiya</a>. Without them, we would have had nothing to commit!</p>
<p>Listing all of those names brings to mind the platform that they all use to contribute and coordinate: <a href="https://drupal.org">drupal.org</a>, maintained by the <a href="https://assoc.drupal.org/">Drupal Association</a>. It also brings to mind the events, like Drupalcon, Drupalcamps, Dev Days, which everyone attends to collaborate, teach, and learn; also maintained by the <a href="https://assoc.drupal.org/">Drupal Association</a>. Not to mention the Drupal 8 Accelerate program, which raised $250,000 towards developer grants; also created and maintained by the <a href="https://assoc.drupal.org/">Drupal Association</a>. The people at the Association have worked tirelessly to support this release.</p>
<p>All of this developer time is extremely valuable, and not all of it came out of the developers&rsquo; own free time. Huge swaths of Drupal 8 development have been sponsored by the companies that participate in the community. We&rsquo;ve only been tracking their contributions for a short time, but the information we have is powerful. This release would not have happened without the developer time donated by companies like <a href="https://acquia.com">Acquia</a>, <a href="http://www.md-systems.ch">MD Systems</a>, <a href="http://www.chapterthree.com">Chapter Three</a>, <a href="http://tag1consulting.com">Tag1</a>, and <a href="http://druid.fi">Druid</a>. A quick glance at <a href="https://www.drupal.org/drupal-services">Drupal.org&rsquo;s Drupal Services page</a> shows us that contribution is a normal part of the culture for the biggest Drupal companies. These were the top 5, but almost every major Drupal shop has contributed in some measure. Thank you to these companies for believing in our product and supporting it so generously.</p>
<p>Finally, the people who bear the greatest personal responsibility are definitely the core maintainers. These people don&rsquo;t just deserve your thanks; they deserve lifetime supplies of free beer sent to their homes. I can&rsquo;t offer that on a blog; all I can say is THANK YOU.</p>
<p><a href="https://drupal.org/u/effulgentsia">Alex Bronstein</a></p>
<p><a href="https://drupal.org/u/dries">Dries Buytaert</a></p>
<p><a href="https://drupal.org/u/webchick">Angie &ldquo;webchick&rdquo; Byron</a></p>
<p><a href="https://drupal.org/u/catch">Nat Catchpole</a></p>
<p><a href="https://drupal.org/u/xjm">Jess Myrbo</a></p>
<p><a href="https://drupal.org/u/alexpott">Alex Pott</a></p>
<p>To everyone who contributed, but especially the people I&rsquo;ve listed here: You&rsquo;ve made a new generation of Internet innovation possible. Thank you.</p>
]]></content>
    </entry>
  <entry>
    <title type="html"><![CDATA[How to build a new source for Drupal Migrate 8]]></title>
    <link href="https://ohthehugemanatee.org/blog/2015/05/02/how-to-build-a-new-source-for-drupal-migrate-8/"/>
    <id>https://ohthehugemanatee.org/blog/2015/05/02/how-to-build-a-new-source-for-drupal-migrate-8/</id>
    <author>
      <name>Campbell Vertesi (ohthehugemanatee)</name>
    </author>
    <published>2015-05-02T10:10:36+00:00</published>
    <updated>2015-05-02T10:10:36+00:00</updated>
    <content type="html"><![CDATA[<p>This week I wanted to accomplish a task in Drupal 8 that would be simple in Drupal 7: Import several CSV files, each one related to the others by taxonomy terms. Most importantly, I wanted to do it with <a href="https://drupal.org/project/migrate">Migrate module</a>.</p>
<p>Migrate in Drupal 7 is a fantastic piece of code. It is not designed to be used from the GUI, rather, it provides a framework of &ldquo;source&rdquo;, &ldquo;destination&rdquo;, and &ldquo;migration&rdquo; classes so that even the most convoluted migration is 90% written for you. To create a migration in Drupal 7, you create a custom module, declare your migrations in a hook_info, and then extend the built in &ldquo;migration&rdquo; class. You instantiate one of the given classes for the source material (is it a CSV? JSON? Direct connection to a custom DB?), then one of the classes for the destination (is it a content type? Taxonomy term?). Then you add one simple line of code mapping each field from source to destination. If you know what you&rsquo;re doing, the task I had in mind shouldn&rsquo;t take more than 15 minutes per source.</p>
<p>It&rsquo;s not quite so easy in Drupal 8. First of all, with Migrate in core, we had to greatly simplify the goals for the module. The version of Migrate that is really functional and stable is specifically and <em>only</em> the basic framework. There is a separate migrate_drupal module to provide everything you need for migrating from Drupal 6 or 7. This has been a laser-tight focus on just the essentials, which means there&rsquo;s no UI, very little drush support, and definitely no nice extras like the ability to read non-Drupal sources.</p>
<p>My task this week became to write the first CSV source for Drupal 8 Migrate.</p>
<h1 id="drupal-8-migrate-overview">Drupal 8 Migrate Overview</h1>
<p>Drupal 8 Migrations, when you&rsquo;re using classes that already exist, are actually even easier than Migrate 7. All you do is write a single YAML file for each kind of data you&rsquo;re transferring, and put it in a custom module&rsquo;s <em>config/install</em> directory. Your YAML file gives your migration a name and a group, tells us what the source is for data, maps source fields to destination fields, and tells us what the destination objects are. Here&rsquo;s an example Migration definition file from core. See if you can understand what&rsquo;s being migrated here.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">id</span>: <span style="color:#ae81ff">d6_system_site</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">label</span>: <span style="color:#ae81ff">Drupal 6 site configuration</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">migration_groups</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">Drupal 6</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">source</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">plugin</span>: <span style="color:#ae81ff">variable</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">variables</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">site_name</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">site_mail</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">site_slogan</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">site_frontpage</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">site_403</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">site_404</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">drupal_weight_select_max</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">admin_compact_mode</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">process</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">site_name</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">mail</span>: <span style="color:#ae81ff">site_mail</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">slogan</span>: <span style="color:#ae81ff">site_slogan</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#39;page/front&#39;</span>: <span style="color:#ae81ff">site_frontpage</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#39;page/403&#39;</span>: <span style="color:#ae81ff">site_403</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#39;page/404&#39;</span>: <span style="color:#ae81ff">site_404</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">weight_select_max</span>: <span style="color:#ae81ff">drupal_weight_select_max</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">admin_compact_mode</span>: <span style="color:#ae81ff">admin_compact_mode</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">destination</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">plugin</span>: <span style="color:#ae81ff">config</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">config_name</span>: <span style="color:#ae81ff">system.site</span>
</span></span></code></pre></div><p>You probably figured it out: this migration takes the system settings (variables) from a Drupal 6 site, and puts them into the Drupal 7 configuration. Not terribly hard, right? You can even do data transformations from the source field value to the destination.</p>
<p>Unfortunately, the only sources we have so far are for Drupal 6 and 7 sites, pulling directly from the database. If you want to use Migrate 8 the way we used Migrate 7, as an easy way to pull in data from arbitrary sources, you&rsquo;ll have to contribute.</p>
<h1 id="writing-a-source-plugin-in-migrate_plus">Writing a source plugin in Migrate_plus</h1>
<p>Enter <a href="https://www.drupal.org/sandbox/mikeryan/migrate_plus">Migrate Plus module</a>. This is the place in contrib, where we can fill out all the rest of the behavior we want from Migrate, that&rsquo;s not necessarily a core requirement. This is where we&rsquo;ll be writing our source plugin.</p>
<p>To add a source plugin, just create a .php file in migrate_plus/src/Plugins/migrate/source . Drupal will discover the new plugin automatically the next time you rebuild the cache. The filename has to be the same as the name of the class, so choose carefully! My file is called CSV.php . Here&rsquo;s the top of the file you need for a basic :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#f92672">&lt;?</span><span style="color:#a6e22e">php</span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">/**
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> * @file
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> * Contains \Drupal\migrate_plus\Plugin\migrate\source\csv.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> */</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">namespace</span> <span style="color:#a6e22e">Drupal\migrate_plus\Plugin\migrate\source</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">use</span> <span style="color:#a6e22e">Drupal\migrate\Plugin\migrate\source\SourcePluginBase</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">/**
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> * Source for CSV files.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> *
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> * @MigrateSource(
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> *   id = &#34;csv&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> * )
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> */</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">CSV</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">SourcePluginBase</span> {
</span></span></code></pre></div><p>I&rsquo;m calling this out separately because for newbies to Drupal 8, this is the hard part. This is all the information that Drupal needs to be able to find your class when it needs it. The @file comment is important. That and the namespace below have to match the actual location of the .php file.</p>
<p>Then you declare any other classes that you need, with their full namespace. To start with all you need is SourcePluginBase.</p>
<p>Finally you have to annotate the class with that @MigrateSource(id=&ldquo;csv&rdquo;). This is how Migrate module knows that this is a MigrateSource, and the name of your Plugin. Don&rsquo;t miss it!</p>
<p>Inside the class, you must have the following methods. I&rsquo;ll explain a bit more about each afterwards.</p>
<ul>
<li>initializeIterator() : Should return a valid Iterator object.</li>
<li>getIds() : Should return an array that defines the unique identifiers of your data source.</li>
<li>__toString() : Should return a simple, string representation of the source.</li>
<li>fields() : Should return a definitive list of fields in the source.</li>
<li>__construct() : You don&rsquo;t NEED this method, but you probably will end up using it.</li>
</ul>
<h2 id="initializeiterator">initializeIterator()</h2>
<p>An Iterator is a complicated sounding word for an Object that contains everything you need to read from a data source, and go through it one line at a time. Maybe you&rsquo;re used to fopen(&lsquo;path/to/file&rsquo;, &lsquo;r&rsquo;) to open a file, and then you write code for every possible operation with that file. An iterator takes care of all that for you. In the case of most file-based sources, you can just use the SplFileObject class that comes with PHP.</p>
<p>Any arguments that were passed in the source: section of the YAML file will be available under $this-&gt;configuration. So if my YAML looks like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">source</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">plugin</span>: <span style="color:#ae81ff">csv</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">path</span>: <span style="color:#e6db74">&#39;/vagrant/import/ACS_13_1YR_B28002_with_ann.csv&#39;</span>
</span></span></code></pre></div><p>My initializeIterator( ) method can look like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">initializeIterator</span>() {
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// File handler using our custom header-rows-respecting extension of SPLFileObject.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  $file <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">SplFileObject</span>($this<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">configuration</span>[<span style="color:#e6db74">&#39;path&#39;</span>]);
</span></span><span style="display:flex;"><span>  $file<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">setFlags</span>(<span style="color:#a6e22e">SplFileObject</span><span style="color:#f92672">::</span><span style="color:#a6e22e">READ_CSV</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> $file;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Not too complicated, right? This method is called right at the beginning of the migration, the first time Migrate wants to get any information out of your source. The iterator will be stored in $this-&gt;iterator.</p>
<h2 id="getids">getIds()</h2>
<p>This method should return an array of all the unique keys for your source. A unique key is some value that&rsquo;s unique for that row in the source material. Sometimes there&rsquo;s more than one, which is why this is an array. Each key field name is also an array, with a child &ldquo;type&rdquo; declaration. This is hard to explain in English, but easy to show in code:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">getIDs</span>() {
</span></span><span style="display:flex;"><span>  $ids <span style="color:#f92672">=</span> <span style="color:#66d9ef">array</span>();
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">foreach</span> ($this<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">configuration</span>[<span style="color:#e6db74">&#39;keys&#39;</span>] <span style="color:#66d9ef">as</span> $key) {
</span></span><span style="display:flex;"><span>    $ids[$key][<span style="color:#e6db74">&#39;type&#39;</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;string&#39;</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> $ids;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We rely on the YAML author to tell us the key fields in the CSV, and we just reformat them accordingly. Type can be &lsquo;string&rsquo;, &lsquo;float&rsquo;, &lsquo;integer&rsquo;, whatever makes sense.</p>
<h2 id="__tostring">__toString()</h2>
<p>This method has to return a simple string explanation of the source query. In the case of a file-based source, it makes sense to print the path to the file, like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">function</span> __toString() {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> (<span style="color:#a6e22e">string</span>) $this<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">query</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="fields">fields()</h2>
<p>This method returns an array of available fields on the source. The keys should be the machine names, the values are descriptive, human-readable names. In the case of the CSV source, we look for headers at the top of the CSV file and build the array that way.</p>
<h2 id="__construct">__construct()</h2>
<p>The constructor method is called whenever a class is instantiated. You don&rsquo;t technically HAVE to have a constructor on your source class, but you&rsquo;ll find it helpful. For the CSV source, I used the constructor to make sure we have all the configuration that we need. Then I try and set sane values for fields, based on any header in the file.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">function</span> __construct(<span style="color:#66d9ef">array</span> $configuration, $plugin_id, $plugin_definition, <span style="color:#a6e22e">MigrationInterface</span> $migration) {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">parent</span><span style="color:#f92672">::</span><span style="color:#a6e22e">__construct</span>($configuration, $plugin_id, $plugin_definition, $migration);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// Path is required.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">empty</span>($this<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">configuration</span>[<span style="color:#e6db74">&#39;path&#39;</span>])) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">MigrateException</span>(<span style="color:#e6db74">&#39;You must declare the &#34;path&#34; to the source CSV file in your source settings.&#39;</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// Key field(s) are required
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">empty</span>($this<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">configuration</span>[<span style="color:#e6db74">&#39;keys&#39;</span>])) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">MigrateException</span>(<span style="color:#e6db74">&#39;You must declare the &#34;keys&#34; the source CSV file in your source settings.&#39;</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// Set header rows from the migrate configuration.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  $this<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">headerRows</span> <span style="color:#f92672">=</span> <span style="color:#f92672">!</span><span style="color:#66d9ef">empty</span>($this<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">configuration</span>[<span style="color:#e6db74">&#39;header_rows&#39;</span>]) <span style="color:#f92672">?</span> $this<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">configuration</span>[<span style="color:#e6db74">&#39;header_rows&#39;</span>] <span style="color:#f92672">:</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// Figure out what CSV columns we have.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#75715e">// One can either pass in an explicit list of column names to use, or if we have
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#75715e">// a header row we can use the names from that
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">if</span> ($this<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">headerRows</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#66d9ef">empty</span>($this<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">configuration</span>[<span style="color:#e6db74">&#39;csvColumns&#39;</span>])) {
</span></span><span style="display:flex;"><span>    $this<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">csvColumns</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">array</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Skip all but the last header
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">for</span> ($i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; $i <span style="color:#f92672">&lt;</span> $this<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">headerRows</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>; $i<span style="color:#f92672">++</span>) {
</span></span><span style="display:flex;"><span>      $this<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">getNextLine</span>();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    $row <span style="color:#f92672">=</span> $this<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">getNextLine</span>();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">foreach</span> ($row <span style="color:#66d9ef">as</span> $key <span style="color:#f92672">=&gt;</span> $header) {
</span></span><span style="display:flex;"><span>      $header <span style="color:#f92672">=</span> <span style="color:#a6e22e">trim</span>($header);
</span></span><span style="display:flex;"><span>      $this<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">getIterator</span>()<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">csvColumns</span>[] <span style="color:#f92672">=</span> <span style="color:#66d9ef">array</span>($header, $header);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">elseif</span> ($this<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">configuration</span>[<span style="color:#e6db74">&#39;csvColumns&#39;</span>]) {
</span></span><span style="display:flex;"><span>    $this<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">getIterator</span>()<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">csvColumns</span> <span style="color:#f92672">=</span> $this<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">configuration</span>[<span style="color:#e6db74">&#39;csvColumns&#39;</span>];
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="profit">Profit!</h2>
<p>That&rsquo;s it! Four simple methods, and you have a new source type for Drupal 8 Migrate. Of course, you will probably find complications that require a bit more work. For CSV, supporting a header row turned out to be a real pain. Any time Migrate tried to &ldquo;rewind&rdquo; the source back to the first line, it would try and migrate the header row! I ended up extending SplFileObject just to handle this issue.</p>
<p>Here&rsquo;s the YAML file I used to test this, importing a list of states from some US Census data.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">id</span>: <span style="color:#ae81ff">states</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">label</span>: <span style="color:#ae81ff">States</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">migration_groups</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">US Census</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">source</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">plugin</span>: <span style="color:#ae81ff">csv</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">path</span>: <span style="color:#e6db74">&#39;/vagrant/import/ACS_13_1YR_B28002_with_ann.csv&#39;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">header_rows</span>: <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">fields</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">Id2</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">Geography</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">keys</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">Id2</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">process</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Geography</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">vid</span>:
</span></span><span style="display:flex;"><span>    -
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">plugin</span>: <span style="color:#ae81ff">default_value</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">default_value</span>: <span style="color:#ae81ff">state</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">destination</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">plugin</span>: <span style="color:#ae81ff">entity:taxonomy_term</span>
</span></span></code></pre></div><p>You can see my CSV source and Iterator in the <a href="https://www.drupal.org/node/2458003">issue queue for migrate_plus</a>. Good luck, and happy migrating!</p>
<h2 id="thanks">Thanks</h2>
<p>I learned a lot this week. Big thanks to the <a href="https://www.drupal.org/node/2127611">Migrate Documentation</a>, but especially to <a href="https://www.drupal.org/u/chx">chx</a>, <a href="https://www.drupal.org/u/mikeryan">mikeryan</a>, and the other good folks in #drupal-migrate who helped set me straight.</p>
]]></content>
    </entry>
  <entry>
    <title type="html"><![CDATA[Drupalgeddon: Best Practices Aren&#39;t Good Enough Anymore]]></title>
    <link href="https://ohthehugemanatee.org/blog/2014/11/03/drupalgeddon-means-we-cant-trust-humans-with-updates/"/>
    <id>https://ohthehugemanatee.org/blog/2014/11/03/drupalgeddon-means-we-cant-trust-humans-with-updates/</id>
    <author>
      <name>Campbell Vertesi (ohthehugemanatee)</name>
    </author>
    <published>2014-11-03T17:30:32+00:00</published>
    <updated>2014-11-03T17:30:32+00:00</updated>
    <content type="html"><![CDATA[<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
]]></content>
    </entry>
  <entry>
    <title type="html"><![CDATA[Bug: Multilingual Auto Label will break your Entity Static Cache]]></title>
    <link href="https://ohthehugemanatee.org/blog/2014/07/01/bug-multilingual-auto-label-will-break-your-entity-static-cache/"/>
    <id>https://ohthehugemanatee.org/blog/2014/07/01/bug-multilingual-auto-label-will-break-your-entity-static-cache/</id>
    <author>
      <name>Campbell Vertesi (ohthehugemanatee)</name>
    </author>
    <published>2014-07-01T17:00:45+00:00</published>
    <updated>2014-07-01T17:00:45+00:00</updated>
    <content type="html"><![CDATA[<p>This is an important one to note: If you use the popular <a href="https://www.drupal.org/project/auto_entitylabel">Automatic Entity Label</a> module on a multilingual site, <a href="https://www.drupal.org/node/2295325">it will break your paths</a> because of an interaction with Drupal&rsquo;s built in object cache. I looked at this briefly a few months ago and ran out of time, but my (badass) colleague <a href="https://www.drupal.org/u/bburg">bburg</a> figured it out this week.</p>
<p>For now, the only solution is a slow one - we clear static entity caches when we generate multilingual titles. That&rsquo;s not an awesome fix, but it&rsquo;s hard to think of a better one without any of the D8 cache tagging functionality. Massive kudos to bburg for figuring this out!</p>
<p>And for those of you keeping score, this is a good example of how to file a bug report for a really complex issue in a really popular module&hellip; and follow up until you resolve it.</p>
]]></content>
    </entry>
  <entry>
    <title type="html"><![CDATA[D8 Core sprint in DC]]></title>
    <link href="https://ohthehugemanatee.org/blog/2014/07/01/d8-core-sprint-in-dc/"/>
    <id>https://ohthehugemanatee.org/blog/2014/07/01/d8-core-sprint-in-dc/</id>
    <author>
      <name>Campbell Vertesi (ohthehugemanatee)</name>
    </author>
    <published>2014-07-01T16:27:17+00:00</published>
    <updated>2014-07-01T16:27:17+00:00</updated>
    <content type="html"><![CDATA[<p>A quick note to all the Drupalists in the DC general area - Forum One is trying to put together a D8 core sprint in their DC office space. They&rsquo;re coordinating with the DC Meetup group to try and spread the word to as many community members as possible!</p>
<p>If you haven&rsquo;t been to a code sprint before, it&rsquo;s basically a coding party. Developers get together and help each other contribute better and faster by reviewing code on the spot, mentoring each other, and generally working in small ad-hoc groups. It&rsquo;s a lot of fun, and gives a big boost to development of the next generation of Drupal.</p>
<p>Forum One will provide the locale in downtown DC complete with pizza, beer, and soda. We also have a few of our core mentors on hand to help you get started if this is your first time contributing to core. Because of the building security, if you want to attend you <a href="http://www.eventbrite.com/e/drupal-8-code-sprint-with-forum-one-tickets-11921354091">have to register first</a>! I won&rsquo;t be able to attend, but my colleagues <a href="https://twitter.com/johnbburg">John Brandenburg</a> and <a href="https://twitter.com/kalpanagoel">Kalpana Goel</a> will be there mentoring. Go sign up now!</p>
]]></content>
    </entry>
  <entry>
    <title type="html"><![CDATA[Authenticated User Caching Concepts in Drupal 7]]></title>
    <link href="https://ohthehugemanatee.org/blog/2014/06/09/authenticated-user-caching-in-drupal/"/>
    <id>https://ohthehugemanatee.org/blog/2014/06/09/authenticated-user-caching-in-drupal/</id>
    <author>
      <name>Campbell Vertesi (ohthehugemanatee)</name>
    </author>
    <published>2014-06-09T22:21:01+00:00</published>
    <updated>2014-06-09T22:21:01+00:00</updated>
    <content type="html"><![CDATA[<p>Drupal has a wide variety of highly effective solutions for caching anonymous user content. The typical setup is APC, Memcached or Redis, and Varnish in front, and this can easily serve thousands of concurrent anonymous users. There is excellent documentation out there discussing this kind of simple caching.</p>
<p>But what about authenticated users? You can cache elements of the page using a method like <a href="https://drupal.org/project/rendercache">Render cache</a>, <a href="https://drupal.org/project/entitycache">Entity Cache</a>, or <a href="https://drupal.org/project/views_content_cache">Views Content Cache</a>. But Drupal still has to assemble each page for your users, a relatively heavy operation! If you want to address hundreds or thousands of authenticated users, you&rsquo;re simply SOL by these traditional approaches.</p>
<p>Enter the <a href="https://drupal.org/project/authcache">Auth Cache</a> suite of modules. Though this project has been around for quite some time, it had a reputation of being finicky and hard to set up. It got a significant rewrite in the last year thanks to <a href="https://drupal.org/users/znerol">znerol</a>, and is now a powerhouse of a module that brings authenticated user caching much closer to regular users.</p>
<p>I will say that this is still not for the squeamish. You have to really understand the building blocks of your site, and you will have to make a plan for each unique layout on your site. There are some page elements that are quite hard to build this way, but for the most part Authcache makes this easy.</p>
<h2 id="the-theory">The theory</h2>
<p>The idea behind authenticated user caching is simple. We already have a great caching mechanism for pages that stay exactly the same for all users. So we simply identify the parts of the page that will change for each user, and use a placeholder for them instead. Think of it as a <!-- raw HTML omitted --> tag in HTML. This way the page caching mechanism can ignore the customized content, and focus on the stuff that IS the same across all requests.</p>
<p>There are three major ways of doing this placeholder: AJAX, ESI, and Cookies.</p>
<p>With AJAX, you just include a little JS that says &ldquo;fill this DIV with the contents of <a href="http://example.com/user/customized/thing%22">http://example.com/user/customized/thing&quot;</a>. The client&rsquo;s web browser makes a second call to the server, which is configured to allow /user/customized/thing through the cache all the way to your website. Drupal (or whatever you&rsquo;re running) fills in the HTML that belongs in that div and returns it to the browser. Congratulations! You just served an authenticated user a page which was 99% cached. You only had to generate the contents of one div.</p>
<p>ESI is short for <a href="https://en.wikipedia.org/wiki/Edge_Side_Includes">Edge Side Includes</a>, a small extension to HTML which effectively does the same thing as that Javascript, but on the &ldquo;Edge server&rdquo;. The Edge server is whatever service touches the HTTP request last before sending it to the client. Apache, NGINX, Varnish, pound&hellip; you want this to happen as far down the stack as you control. An ESI tag in your HTML looks like this:</p>
<pre tabindex="0"><code>&lt;esi:include src=&#34;http://example.com/user/customized/thing&#34; onerror=&#34;continue&#34;/&gt;
</code></pre><p>It&rsquo;s pretty clear, even to a human reader, what this tag means: &ldquo;replace this tag with the contents of <a href="http://example.com/user/customized/thing%22">http://example.com/user/customized/thing&quot;</a>. ESI actually supports some simple logic as well, but that&rsquo;s not really relevant to what we&rsquo;re doing here.</p>
<p>The only difference between ESI and AJAX is where the placeholder is filled. With ESI it happens on the edge service, and with AJAX it happens in the client browser. There is a subtle difference here: a page with ESI will not be delivered until all the ESI calls have returned something, while an AJAX page will return right away, even if the components don&rsquo;t immediately appear. On the other hand, ESI is much better for degraded browsers. YMMV.</p>
<p>The last method is using Cookies. You can store arbitrary information on cookies, as long as you&rsquo;re careful about security. That can be a very effective way to get certain limited information through a caching layer. Authcache actually comes with an example module for just such a use case. It passes the user&rsquo;s name and account URL in a cookie, so you can display it in a block.</p>
<p>This is effective for very small amounts of information, but keep it limited. Cookie headers aren&rsquo;t designed to hold large quantities of data, and reverse proxies can have a hard time if you put too much information in there. Still, it&rsquo;s a neat trick that can cover you for that &ldquo;Hello Username&rdquo; block.</p>
<h2 id="authcache-in-drupal">Authcache in Drupal</h2>
<p>The <a href="https://drupal.org/project/authcache">Authcache</a> suite of modules tries to automatically implement AJAX and/or ESI for you. It actually goes one step further, and implements a caching layer for those &ldquo;fragments&rdquo; which are to be returned via ESI/AJAX. The fragments can be stored in any caching system which implements <a href="http://api.drupal.org/api/drupal/includes%21cache.inc/interface/DrupalCacheInterface/7">DrupalCacheInterface</a>, ie any caching module you&rsquo;ve heard of. Memcache, APC, File Cache, Redis, MongoDB. The full page HTML with placeholders can be cached in Drupal&rsquo;s normal page cache, in Boost, or in Varnish.</p>
<p>Once you have these caching mechanisms defined, it&rsquo;s just a question of marking sections of your site which need a second callback. Authcache presents a large number of modules to do this. You can define any of the following as requiring a second call:</p>
<ul>
<li>Blocks</li>
<li>Views</li>
<li>Panels Panes</li>
<li>Fields</li>
<li>Comments</li>
<li>Flags</li>
<li>Forms</li>
<li>Forums</li>
<li>Polls</li>
<li>Votes</li>
</ul>
<p>&hellip; and that&rsquo;s all without writing a single line of custom code! Each one of those elements gets a new &ldquo;Authcache&rdquo; setting, where you can define it as needing a second callback, and set the method for the callback as either AJAX or ESI. You can even fall back to another method if the first one fails!</p>
<p>A good example of how this works is the Forms integration. Authcache will modify any and all forms on your site, so that they have an ESI or AJAX placeholder for the form token. This means that the form itself can be stored in your page cache (Varnish, Boost, or whatever), and the form token will be filled in automatically! That&rsquo;s a phenomenal speed improvement without any configuration beyond enabling the module.</p>
<p>Setting up Authcache is a little complicated, and I&rsquo;ll cover that in depth in my next post. But once the basic AJAX or ESI support is set up and these modules are enabled, caching authenticated users becomes a question of visiting each unique layout on your site and making a plan for each element that involves user customization. Authcache makes this easy.</p>
<p>Next post: <a href="https://ohthehugemanatee.org/blog/2014/06/14/how-to-configure-authcache-on-drupal-7/">How to configure Authcache on Drupal 7</a>.</p>
]]></content>
    </entry>
  <entry>
    <title type="html"><![CDATA[Drupal Superheroes: ASSEMBLE!]]></title>
    <link href="https://ohthehugemanatee.org/blog/2014/05/28/drupal-superheroes-assemble/"/>
    <id>https://ohthehugemanatee.org/blog/2014/05/28/drupal-superheroes-assemble/</id>
    <author>
      <name>Campbell Vertesi (ohthehugemanatee)</name>
    </author>
    <published>2014-05-28T12:44:01+00:00</published>
    <updated>2014-05-28T12:44:01+00:00</updated>
    <content type="html"><![CDATA[<p><!-- raw HTML omitted --> Regular Drupalcon attendees know that the opening pre-keynote session is one of the highlights of the con. That&rsquo;s the session where we welcome everyone to the con with stupid jokes, some well known Drupalists, and a lot of fun. This year is going to be especially good - and we need your help!</p>
<p>The evil Lord Over Engineering is threatening to delay the release of the CMS, which we need to save the world! The only way to stop him is to assemble the greatest force of Drupal superheroes ever assembled! Can the heroes save the day? Can we manage to make the final git push? You&rsquo;ll have to be there to find out!</p>
<blockquote>
<p>&ldquo;If you only get up early once during DrupalCon, this is the morning to do it. And hey, at least you&rsquo;ll get better seats for my keynote right after.&rdquo; &ndash; Dries</p>
</blockquote>
<p>In Prague we had the Drupal Opera, with <a href="http://www.youtube.com/watch?v=3eSxaNmGHYQ?t=11m9s%22">solos sung by Gabor Hojtsy</a>. In Portland we had the Drupal Game show, including <a href="http://youtu.be/390cllsL7r8?t=30m9s">Doug Vann&rsquo;s amazing beatbox of the Tetris theme</a>. In Munich, we taught the world to yodel and pour good German beer. Don&rsquo;t miss out this year! The fun is just getting started!</p>
<p>If you want to participate onstage, you can go to <a href="http://www.robshouse.net/content/attention-drupal-super-heroes-your-powers-are-needed">Robert Douglass&rsquo; blog</a> and sign up with our superhero/villain application form. But even if you just want to party from your comfy chair in the audience, costumes are encouraged! So get your best superhero costume together, and I&rsquo;ll see you at the pre-keynote!</p>
]]></content>
    </entry>
  <entry>
    <title type="html"><![CDATA[Drupalcamp Helsinki takes on the world]]></title>
    <link href="https://ohthehugemanatee.org/blog/2014/05/26/drupalcamp-helsinki-takes-on-the-world/"/>
    <id>https://ohthehugemanatee.org/blog/2014/05/26/drupalcamp-helsinki-takes-on-the-world/</id>
    <author>
      <name>Campbell Vertesi (ohthehugemanatee)</name>
    </author>
    <published>2014-05-26T15:14:58+00:00</published>
    <updated>2014-05-26T15:14:58+00:00</updated>
    <content type="html"><![CDATA[<p>Last weekend I got to keynote <a href="http://drupalcamp.fi">Drupalcamp Helsinki</a> with my friend and often-collaborator, <a href="http://twitter.com/adamjurantenor">scaragucc</a> - and what a great camp it was! Organizer <a href="https://twitter.com/laurii1">Lauri Eskola</a> deserves tremendous credit for taking this camp to the next level. They doubled their attendance from last year, attracted positive attention from some great notables in the global Drupal world, and got their local community energized to engage more. At all the various after parties there were frequent toasts of &ldquo;one of the best Drupalcamps in the world!&rdquo;</p>
<p>Lauri and I met at the last <a href="http://szeged2014.drupaldays.org">Drupal Dev Days</a> event, in Szeged. That was also hailed as an example of a hugely successful Drupal event, and he took the lessons from their <a href="https://docs.google.com/file/d/0B6xsrc5BVkagNVpoeEFDZy1RMVk/edit">in-depth report</a> to heart. To be fair, the local volunteers and sponsors also clearly busted their humps getting people registered, and finding good session speakers to work with.</p>
<p>The result was a really positive Drupal event for all of us. Their attendance shot past the 200 mark for the first time, their code sprint had more involvement than ever before, and their social activities were a huge success. We left Finland full of positive feeling for the local association there, the city of Helsinki, and of course the sauna culture! This was a great example of what a Drupal community event can be. I&rsquo;m looking forward to next year already.</p>
]]></content>
    </entry>
  <entry>
    <title type="html"><![CDATA[Coder vs. Themer Ultimate Grudge Match Smackdown Fight to the Death]]></title>
    <link href="https://ohthehugemanatee.org/blog/2014/05/01/coder-vs-themer-ultimate-grudge-match-smackdown-fight-to-the-death/"/>
    <id>https://ohthehugemanatee.org/blog/2014/05/01/coder-vs-themer-ultimate-grudge-match-smackdown-fight-to-the-death/</id>
    <author>
      <name>Campbell Vertesi (ohthehugemanatee)</name>
    </author>
    <published>2014-05-01T17:15:31+00:00</published>
    <updated>2014-05-01T17:15:31+00:00</updated>
    <content type="html"><![CDATA[<p>I&rsquo;m really excited about a new session that I&rsquo;ve been doing with my friend and colleague, <a href="https://twitter.com/adamjurantenor">Adam Juran aka scaragucc</a>: the Coder vs Themer Ultimate Grudge Match Smackdown Fight to the Death! The basic premise: we both start with the same wireframe of a front page to build. But <em>I&rsquo;m only allowed to use the module layer, and Adam is only allowed to use the theme layer</em>. It&rsquo;s a really fun and entertaining way to play with the blurry lines between &ldquo;coder&rdquo; and &ldquo;themer&rdquo;. We get the audience pretty pumped up, which is impressive for a session that&rsquo;s basically about watching other people code!</p>
<p>If you didn&rsquo;t catch it at <a href="http://szeged2014.drupaldays.org/program/sessions/themer-vs-coder-ultimate-grudge-smackdown-fight-death">Drupal Dev Days in Szeged</a>, or at <a href="https://2014.drupalcamp-frankfurt.de/session/themer-vs-coder-ultimate-grudge-smackdown-fight-death">Drupalcamp Frankfurt</a>, you&rsquo;re probably going to have to wait for Drupalcon Amsterdam to take part! But I do have a video of the session at Frankfurt, just to whet your appetite. :)</p>
<!-- raw HTML omitted -->
<p>You can consider this a challenge: if any other themers out there want to challenge me to a coder vs themer style battle, I&rsquo;ll be keynoting at <a href="http://drupalcamp.fi">Drupalcamp Helsinki</a> in a few weeks. I&rsquo;ll meet you there!</p>
]]></content>
    </entry>
  <entry>
    <title type="html"><![CDATA[How to create a custom Display Suite field]]></title>
    <link href="https://ohthehugemanatee.org/blog/2014/04/02/how-to-create-a-custom-display-suite-field/"/>
    <id>https://ohthehugemanatee.org/blog/2014/04/02/how-to-create-a-custom-display-suite-field/</id>
    <author>
      <name>Campbell Vertesi (ohthehugemanatee)</name>
    </author>
    <published>2014-04-02T16:12:13+00:00</published>
    <updated>2014-04-02T16:12:13+00:00</updated>
    <content type="html"><![CDATA[<p>A few months ago I posted about <a href="https://ohthehugemanatee.org/blog/2014/01/03/how-to-create-a-custom-panels-pane">how to create a custom Panels pane</a>, a critical reference for anyone who uses Panels layouts. The other part of the toolkit for quick and awesome layouts is the <a href="https://drupal.org/projects/ds">Display Suite</a> module. With DS you can create new &ldquo;Display modes&rdquo; for your content, to be reused around the site. For example, on one recent site I had four standard ways to display my nodes: Full, Teaser, Mini-Teaser, and Search Result. DS made this configuration a cinch.</p>
<p>But just as in Panels you sometimes need a pane that isn&rsquo;t provided out of the box, in Display Suite you sometimes want to add a field that isn&rsquo;t really a field on your content. In a recent site build, I used this capability to include information from the Organic Groups a user belongs to on his profile as it appears in search results.</p>
<p>DS offers some ability to create this kind of custom field through the UI, but I&rsquo;m talking about more complicated outcomes where you need/want to use custom code instead. This is actually even easier than custom panels panes.</p>
<p>In our example, we will display the user&rsquo;s name, but backwards. Obviously you can do much more complex things with this, but it&rsquo;s nice to have a simple example!</p>
<h1 id="declare-your-fields">Declare your fields</h1>
<p>First we have to tell Display Suite about our new custom field. We do this with <a href="http://drupalcontrib.org/api/drupal/contributions!ds!ds.api.php/function/hook_ds_fields_info/7">hook_ds_fields_info()</a>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#f92672">&lt;?</span><span style="color:#a6e22e">php</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">//@file: Add a custom suite to display suite for Users.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">/**
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> * Implements hook_ds_fields_info().
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> * Declare my custom field.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> */</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">mymodule_ds_fields_info</span>($entity_type) {
</span></span><span style="display:flex;"><span>  $fields <span style="color:#f92672">=</span> <span style="color:#66d9ef">array</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ($entity_type <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;user&#39;</span>) { 
</span></span><span style="display:flex;"><span>    $fields[<span style="color:#e6db74">&#39;backwards_username&#39;</span>] <span style="color:#f92672">=</span> <span style="color:#66d9ef">array</span>(
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#39;title&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#a6e22e">t</span>(<span style="color:#e6db74">&#39;Backwards Username&#39;</span>),
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#39;field_type&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#a6e22e">DS_FIELD_TYPE_FUNCTION</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#39;function&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#39;mymodule_backwards_username&#39;</span>,
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">array</span>($entity_type <span style="color:#f92672">=&gt;</span> $fields);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Any guesses whathappens next? That&rsquo;s right, we have to write our render function under the name we just declared. You can put anything here, really anything renderable at all.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#e6db74">/**
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> * Render function for the Backwards Username field.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> */</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">mymodule_backwards_username</span>($field) {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">isset</span>($field[<span style="color:#e6db74">&#39;entity&#39;</span>]<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">name</span>)) { 
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">check_plain</span>(<span style="color:#a6e22e">strrev</span>($field[<span style="color:#e6db74">&#39;entity&#39;</span>]<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">name</span>));
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>That&rsquo;s it. So simple, you&rsquo;ll wonder why you ever did it any other way!</p>
]]></content>
    </entry>
  <entry>
    <title type="html"><![CDATA[Drupal Dev Days Szeged, or: why you should attend every Camp you can ]]></title>
    <link href="https://ohthehugemanatee.org/blog/2014/03/29/drupal-dev-days-szeged-2014/"/>
    <id>https://ohthehugemanatee.org/blog/2014/03/29/drupal-dev-days-szeged-2014/</id>
    <author>
      <name>Campbell Vertesi (ohthehugemanatee)</name>
    </author>
    <published>2014-03-29T15:27:50+00:00</published>
    <updated>2014-03-29T15:27:50+00:00</updated>
    <content type="html"><![CDATA[<p>Today is the last day of <a href="http://szeged2014.drupaldays.org/">Drupal Dev Days</a> in Szeged, Hungary, and I&rsquo;ve never been more full of the &ldquo;Drupal spirit!&rdquo;</p>
<p>One of Drupal&rsquo;s greatest strengths is the closness of its&rsquo; community, how friendly and accepting they can be. Drupalcons are highlight events for many, not because of the learning as much as because of the social track: the chance to see old friends and make new ones. Even more important is the chance to experience in person this incredibly friendly community. I always loved the cons because you could approach really anybody, say &ldquo;hi&rdquo;, and ask them about their work with the platform. Seriously, anybody. From a new user to Dries himself.</p>
<p>That&rsquo;s become harder and harder as Drupal has grown more popular. In a convention of more than 3,000 people, you lose that feeling of being able to approach anybody. Instead, people silo into groups. In a best case it&rsquo;s a group that shares an interest in a sub-system (Rules junkies, Panels proselytizers, Features fans&hellip;), but in most cases it&rsquo;s because of shared connections outside the community. You end up hanging out with the same people you knew before the con. Of course you can still have fun, but that sense of community is lost.</p>
<p>One of the best parts of Drupal Dev Days Szeged was the way they encouraged people to mix, cross pollinate, and discuss. In a conference of 350 people I felt like I spoke to almost all of them. I could approach even the famous visitors and talk to them like a normal human being. I borrowed VGA adaptors from Gabor Hojtsy and Wim Leers, and neither of them batted an eye at it.</p>
<p>This kind of experience is so great, so positive and validating, that I recommend Drupal Camps for everyone. The ticket price is cheap, the location is always nearby, and the culture is fantastic. The sessions are every bit as good as most DrupalCon sessions (many of us use the Camps as a way to practice before the Con), and you will make great new friends.</p>
<p>Tl;DR: Drupal Dev Days in Szeged was fantastic. If you&rsquo;ve never been to a Drupal Camp event, get your butt onto <a href="http://www.drupical.com/">drupical.com</a> and find your nearest one today!</p>
]]></content>
    </entry>
  <entry>
    <title type="html"><![CDATA[Drush self aliases]]></title>
    <link href="https://ohthehugemanatee.org/blog/2014/01/10/drush-self-aliases/"/>
    <id>https://ohthehugemanatee.org/blog/2014/01/10/drush-self-aliases/</id>
    <author>
      <name>Campbell Vertesi (ohthehugemanatee)</name>
    </author>
    <published>2014-01-10T09:22:01+00:00</published>
    <updated>2014-01-10T09:22:01+00:00</updated>
    <content type="html"><![CDATA[<p>I ran into an interesting problem with the drush <em>@self</em> alias today. I wanted to pull a fresh copy of the DB down from a client&rsquo;s live site to my local development copy. Should be as easy as <em>drush sql-sync @clientsite.live @self</em>, right? I&rsquo;ve done this a thousand times before.</p>
<p>And I&rsquo;ve also ignored the warning message every time before, but today I thought I&rsquo;d check it out:</p>
<blockquote>
<p>WARNING:  Using temporary files to store and transfer sql-dump.  It is recommended that you specify &ndash;source-dump and &ndash;target-dump options on the command line, or set &lsquo;%dump&rsquo; or &lsquo;%dump-dir&rsquo; in the path-aliases section of your site alias records. This facilitates fast file transfer via rsync.</p>
</blockquote>
<p>There are actually two possible solutions to this warning (that I can think of), and they illustrate some of the useful &ldquo;power user&rdquo; features of Drush that any frequent user should be aware of.</p>
<p>The warning is there because drush would <em>prefer</em> to rsync the DB dump from site1 to site2, rather than a one time copy. Rsync has lots of speed improvements, not the least being diff transfer. When transferring an updated copy of a file which already exists at the destination, rsync will only send over the changes rather than the whole file. This is pretty useful if you&rsquo;re dealing with a large, text based file like an SQL dump - especially one that you&rsquo;ll be transferring often. In order to use this efficient processing though, Drush needs to know a safe path where it can store the DB dump in each location.</p>
<p>First we&rsquo;ll add the <em>%dump-dir%</em> attribute to our alias for clientsite:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#f92672">&lt;?</span><span style="color:#a6e22e">php</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Site clientsite, environment live 
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>$aliases[<span style="color:#e6db74">&#39;live&#39;</span>] <span style="color:#f92672">=</span> <span style="color:#66d9ef">array</span>(
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;parent&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#39;@parent&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;site&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#39;clientsite&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;env&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#39;live&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;root&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#39;/var/www/example.com/public_html&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;remote-host&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#39;example.com&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;remote-user&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#39;cvertesi&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;path-aliases&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#66d9ef">array</span>(
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;%dump-dir&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#39;/home/cvertesi/.drush/db_dumps&#39;</span>,
</span></span><span style="display:flex;"><span>  ),
</span></span><span style="display:flex;"><span>);
</span></span></code></pre></div><p>Notice that <em>%dump-dir</em> actually goes in a special sub-array for <em>path-aliases</em>. This is very likely the only time you&rsquo;ll need to use that section, since most everything else in there is auto-detected. This is the directory on the remote side where drush will store the dump.</p>
<p>Our options come in with the <em>@self</em> alias. In a local dev environment, the most common way to handle this is in your <em>drushrc.php</em> file:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span>$options[<span style="color:#e6db74">&#39;dump-dir&#39;</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;~/.drush/db_dumps&#39;</span>;
</span></span></code></pre></div><p>But this won&rsquo;t work for all cases. You can also take advantage of Drush&rsquo;s alias handling by creating a site alias with the settings you want, and letting Drush merge those settings into <em>@self</em>. When Drush builds its&rsquo; cache of path aliases, it uses the site path as the cache key (for local sites only). That means that if you have a local alias with the same path as whatever <em>@self</em> happens to resolve to, your alias options will make it into the definition for <em>@self</em>. So here&rsquo;s the alternate solution:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span>$aliases[<span style="color:#e6db74">&#39;localdev&#39;</span>] <span style="color:#f92672">=</span> <span style="color:#66d9ef">array</span>(
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;root&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#39;/Users/cvertesi/Sites/clientsite&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;uri&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#39;default&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;path-aliases&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#66d9ef">array</span>(
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;%dump-dir&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#39;/home/cvertesi/.drush/db_dumps&#39;</span>,
</span></span><span style="display:flex;"><span>  ),
</span></span><span style="display:flex;"><span>);
</span></span></code></pre></div><p>There&rsquo;s just one, obscure caveat with the latter method: somewhere in the alias merging process, BASH aliases are lost. That means that &lsquo;~&rsquo; stops resolving to your home directory, and you have to write it out (as I did above).</p>
<p>Have fun!</p>
]]></content>
    </entry>
  <entry>
    <title type="html"><![CDATA[How to remove a Drupal install profile]]></title>
    <link href="https://ohthehugemanatee.org/blog/2014/01/07/how-to-remove-a-drupal-install-profile/"/>
    <id>https://ohthehugemanatee.org/blog/2014/01/07/how-to-remove-a-drupal-install-profile/</id>
    <author>
      <name>Campbell Vertesi (ohthehugemanatee)</name>
    </author>
    <published>2014-01-07T13:23:45+00:00</published>
    <updated>2014-01-07T13:23:45+00:00</updated>
    <content type="html"><![CDATA[<p><a href="https://drupal.org/project/install_profile_api">Install profiles</a> are a great way to throw together a functional Drupal site really quickly. In Drupal 6, an Install Profile was just a blueprint for setting up a site really quickly. What you did after the site was installed was your own business! But in Drupal 7 profiles are much more integrated with core. The assumption is that when you use an install profile, you want to rely on the profile&rsquo;s maintainer for all your updates. This is not always the case.</p>
<p>Very often your site will diverge from the install profile as it takes on a life of its own, and it will be useful to convert it to &ldquo;vanilla&rdquo; Drupal. Today I&rsquo;ll use a relatively simple example of a musician site which is moving away from the <a href="https://drupal.org/project/pushtape">Pushtape</a> distribution. Later I&rsquo;ll return to this subject with the much more in-depth example of moving a community site away from <a href="https://drupal.org/project/commons">Drupal Commons</a>.</p>
<h2 id="move-things-around">Move things around</h2>
<p>Install profiles have all their files stored in the site root&rsquo;s <em>profiles/</em> directory. The first step is going to be moving everything out of there. In the case of pushtape, we have libraries, modules, and a theme stored in there. We&rsquo;re going to move them to a more normal location.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span># mkdir sites/all/libraries
</span></span><span style="display:flex;"><span># mv profiles/pushtape/libraries/* sites/all/libraries
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span># mkdir sites/all/modules/custom
</span></span><span style="display:flex;"><span># mv profiles/pushtape/modules/pushtape_* sites/all/modules/custom
</span></span><span style="display:flex;"><span># mv profiles/pushtape/modules/* sites/all/modules
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span># mkdir sites/all/themes
</span></span><span style="display:flex;"><span># mv profiles/pushtape/themes/* sites/all/themes
</span></span></code></pre></div><p>Next we need to see if there are any variables set in the install profile which really depend on the profile directory. If there are, we&rsquo;ll have to set them again with the new path.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span># cd profiles/pushtape
</span></span><span style="display:flex;"><span># grep <span style="color:#e6db74">&#39;profiles/pushtape&#39;</span> * -R
</span></span><span style="display:flex;"><span>pushtape.install:  variable_set(&#39;sm2_path&#39;, &#39;profiles/pushtape/libraries/soundmanager2&#39;);
</span></span></code></pre></div><p>In this case, we see one variable_set which tells the system where to find the soundmanager2 library. We can update that easily enough with drush:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span># drush vset sm2_path <span style="color:#e6db74">&#39;sites/all/libraries/soundmanager2&#39;</span>
</span></span></code></pre></div><p>Now we have to update Drupal&rsquo;s setting for which install profile was used to create the site.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span># drush vset install_profile standard
</span></span></code></pre></div><p>In some cases this will be enough to work. Personally I like to keep my modules folder more organized, so I go the extra mile:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span># cd sites/all/modules
</span></span><span style="display:flex;"><span># mkdir contrib
</span></span><span style="display:flex;"><span># mv !<span style="color:#f92672">(</span>custom|contrib<span style="color:#f92672">)</span> contrib
</span></span></code></pre></div><p>I also separated out the custom code from the features. You can figure out which custom modules implement features with <em>find . |grep features</em>, and move them into a separate directory manually.</p>
<h2 id="clearing-caches">Clearing caches</h2>
<p>Once you&rsquo;re done moving things around, CLEAR CACHES. Drupal keeps an index of module, library, and theme directories, and you just broke it.</p>
<pre tabindex="0"><code>drush cc all
</code></pre><p>The only problem is, in many cases you will have moved a module that is required for drupal bootstrap. So you&rsquo;ll have to get the handy drush tool <a href="https://drupal.org/project/registry_rebuild">Registry Rebuild</a>, and run that before your cache clear:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span># drush dl registry_rebuild
</span></span><span style="display:flex;"><span># drush rr
</span></span><span style="display:flex;"><span># drush cc all
</span></span></code></pre></div><h2 id="extra-cleanup">Extra Cleanup</h2>
<p>As commenter @ericaitala notes, you may need some followup cleanup to really get all traces out. The easiest way to do this is from the SQL command line, which you can access via drush:</p>
<pre tabindex="0"><code>drush sqlq &#34;DELETE FROM `system` WHERE filename LIKE &#39;profiles/profilename/profilename.profile&#34;
drush sqlq &#34;UPDATE `system` SET status=1 WHERE filename LIKE &#39;profiles/standard/standard.profile&#39;&#34;
</code></pre><p>Technically these should both be covered by the registry_rebuild operation, but we&rsquo;re doing it by hand because it seems to be missed in some operations. The first command removes the entry for the profile from Drupal&rsquo;s system table - it removes any knowledge Drupal has that there was an install profile there. The second tells Drupal that the &ldquo;standard&rdquo; install profile is active, and should be checked for updates.</p>
<p>That&rsquo;s it - your site is now officially a vanilla Drupal install. Test by removing the profiles/pushtape directory, clearing caches, and browsing around your site.</p>
<p><em>NOTE: With a more complex install profile I expect to encounter more difficulty. Stay tuned for the post on extricating yourself from Commons later this year!</em></p>
]]></content>
    </entry>
  <entry>
    <title type="html"><![CDATA[How to create a custom Panels Pane]]></title>
    <link href="https://ohthehugemanatee.org/blog/2014/01/03/how-to-create-a-custom-panels-pane/"/>
    <id>https://ohthehugemanatee.org/blog/2014/01/03/how-to-create-a-custom-panels-pane/</id>
    <author>
      <name>Campbell Vertesi (ohthehugemanatee)</name>
    </author>
    <published>2014-01-03T13:09:11+00:00</published>
    <updated>2014-01-03T13:09:11+00:00</updated>
    <content type="html"><![CDATA[<p>Lots of sites are now built with the &ldquo;Panels everywhere&rdquo; method, using <a href="https://www.drupal.org/project/panels">Panels</a> and <a href="https://www.drupal.org/project/panelizer">Panelizer</a> to configure modular layouts in the Drupal GUI. These modules come with lots of great default Panes, and create even more defaults based on your existing Blocks and Views. But there&rsquo;s always a case for a custom Pane.</p>
<p>As usual, I&rsquo;ll assume that you have an empty custom module called <em>mymodule</em>, with only a <em>.info</em> and a <em>.module</em> file to its name.</p>
<ol>
<li>Tell CTools that you have custom code here</li>
</ol>
<hr>
<p>Ctools, like Views, needs a hook to declare the fact that you have custom code. To do this we&rsquo;ll use <em><a href="http://drupalcontrib.org/api/drupal/contributions!ctools!ctools.api.php/function/hook_ctools_plugin_directory/7">hook_ctools_plugin_directory</a></em>. This hook is invoked for all Ctools plugin types, and includes the module name as a variable. This way you can avoid eating up memory for anything except the targeted module. You also have to declare where your custom code will live. So here&rsquo;s the complete content of <em>mymodule.module</em>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#f92672">&lt;?</span><span style="color:#a6e22e">php</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">/**
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> * Implements hook_ctools_plugin_directory().
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> */</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">mymodule_ctools_plugin_directory</span>($owner, $plugin_type) {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ($owner <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;ctools&#39;</span> <span style="color:#f92672">&amp;&amp;</span> $plugin_type <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;content_types&#39;</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#39;plugins/content_types&#39;</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Note: <strong>Do not confuse Ctools &ldquo;Content Types&rdquo; with the &ldquo;Content Type&rdquo; entity used elsewhere in Drupal.</strong> This is just confusing naming, but they&rsquo;re totally different things. Actually the most common usage for a Ctools Content Type is a pane, just like what we&rsquo;re doing now. There are other plugin types, but none that interest us in this post.</p>
<ol start="2">
<li>Add your custom pane</li>
</ol>
<hr>
<p>Oh, did you think this would be more difficult? Now that we&rsquo;ve told Ctools to look for Content Type plugins in our module&rsquo;s <em>plugins/content_types</em> subdirectory, we just add a <em>.inc</em> file for each &ldquo;Content Type&rdquo; (aka Pane) that we want to add. Let&rsquo;s do a simple one, which returns the root term of a given taxonomy term. All the following code will go in <em>plugins/content_types/taxonomy_root_term.inc</em> (a name I chose arbitrarily).</p>
<p>Right at the top of the file, we provide a <em>$plugin</em> array which defines the basic information about our <!-- raw HTML omitted -->Pane<!-- raw HTML omitted --> Ctools Content Type. This doesn&rsquo;t go into a function or anything, it just sits at the top of the <em>.inc</em> file:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#f92672">&lt;?</span><span style="color:#a6e22e">php</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>$plugin <span style="color:#f92672">=</span> <span style="color:#66d9ef">array</span>(
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;single&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#66d9ef">TRUE</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;title&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#a6e22e">t</span>(<span style="color:#e6db74">&#39;Taxonomy root term&#39;</span>),
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;description&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#a6e22e">t</span>(<span style="color:#e6db74">&#39;a Display of data from the root term of the given TID&#39;</span>),
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;category&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#a6e22e">t</span>(<span style="color:#e6db74">&#39;Custom Panes&#39;</span>),
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;edit form&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#39;mymodule_taxonomy_root_term&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;render callback&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#39;mymodule_taxonomy_root_term_render&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;admin info&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#39;mymodule_taxonomy_root_term_info&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;defaults&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#66d9ef">array</span>(),
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;all contexts&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#66d9ef">TRUE</span>,
</span></span><span style="display:flex;"><span>);
</span></span></code></pre></div><p>As you can see, this array defines a category, title, and description for the Panels admin interface. It also declares the names of the callbacks which provide the pane&rsquo;s edit form, rendered form, and admin info. &ldquo;Single&rdquo; means that this type has no sub-types. This is the case in every single custom pane I&rsquo;ve ever seen, so it&rsquo;s probably the case for yours as well.</p>
<p>Now we write the callbacks we named in that array. We&rsquo;ll start with the edit form.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">/**
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> * Edit form.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> */</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">mymodule_taxonomy_root_term</span>($form, <span style="color:#f92672">&amp;</span>$form_state) {
</span></span><span style="display:flex;"><span> $conf <span style="color:#f92672">=</span> $form_state[<span style="color:#e6db74">&#39;conf&#39;</span>]; 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> $form[<span style="color:#e6db74">&#39;term&#39;</span>] <span style="color:#f92672">=</span> <span style="color:#66d9ef">array</span>(
</span></span><span style="display:flex;"><span>   <span style="color:#e6db74">&#39;#type&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#39;textfield&#39;</span>,
</span></span><span style="display:flex;"><span>   <span style="color:#e6db74">&#39;#title&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#a6e22e">t</span>(<span style="color:#e6db74">&#39;Term ID&#39;</span>),
</span></span><span style="display:flex;"><span>   <span style="color:#e6db74">&#39;#description&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#a6e22e">t</span>(<span style="color:#e6db74">&#39;The term, from which the root term will be displayed&#39;</span>),
</span></span><span style="display:flex;"><span>   <span style="color:#e6db74">&#39;#default_value&#39;</span> <span style="color:#f92672">=&gt;</span> $conf[<span style="color:#e6db74">&#39;term&#39;</span>],
</span></span><span style="display:flex;"><span> );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  $entity_info <span style="color:#f92672">=</span> <span style="color:#a6e22e">entity_get_info</span>(<span style="color:#e6db74">&#39;taxonomy_term&#39;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  $options <span style="color:#f92672">=</span> <span style="color:#66d9ef">array</span>();
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#66d9ef">empty</span>($entity_info[<span style="color:#e6db74">&#39;view modes&#39;</span>])) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">foreach</span> ($entity_info[<span style="color:#e6db74">&#39;view modes&#39;</span>] <span style="color:#66d9ef">as</span> $mode <span style="color:#f92672">=&gt;</span> $settings) {
</span></span><span style="display:flex;"><span>      $options[$mode] <span style="color:#f92672">=</span> $settings[<span style="color:#e6db74">&#39;label&#39;</span>];
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> $form[<span style="color:#e6db74">&#39;view_mode&#39;</span>] <span style="color:#f92672">=</span> <span style="color:#66d9ef">array</span>(
</span></span><span style="display:flex;"><span>   <span style="color:#e6db74">&#39;#type&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#39;select&#39;</span>,
</span></span><span style="display:flex;"><span>   <span style="color:#e6db74">&#39;#options&#39;</span> <span style="color:#f92672">=&gt;</span> $options,
</span></span><span style="display:flex;"><span>   <span style="color:#e6db74">&#39;#title&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#a6e22e">t</span>(<span style="color:#e6db74">&#39;View mode&#39;</span>),
</span></span><span style="display:flex;"><span>   <span style="color:#e6db74">&#39;#default_value&#39;</span> <span style="color:#f92672">=&gt;</span> $conf[<span style="color:#e6db74">&#39;view_mode&#39;</span>],
</span></span><span style="display:flex;"><span> );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">return</span> $form;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This is a fairly standard Drupal form. It also goes through typical form validation and submission functions, so you can provide a pretty complete experience for the administrator. In our case, we just want to get the term ID of the term whose root parent should be displayed. We let the administrator enter the term ID, and the view mode which should be used to display it. We won&rsquo;t worry about form validation in our example. Let&rsquo;s move on to the Submit function:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#e6db74">/**
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> * Edit form submit function.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> */</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">mymodule_taxonomy_root_term_submit</span>($form, <span style="color:#f92672">&amp;</span>$form_state) {
</span></span><span style="display:flex;"><span>  $form_state[<span style="color:#e6db74">&#39;conf&#39;</span>][<span style="color:#e6db74">&#39;term&#39;</span>] <span style="color:#f92672">=</span> $form_state[<span style="color:#e6db74">&#39;values&#39;</span>][<span style="color:#e6db74">&#39;term&#39;</span>];
</span></span><span style="display:flex;"><span>  $form_state[<span style="color:#e6db74">&#39;conf&#39;</span>][<span style="color:#e6db74">&#39;view_mode&#39;</span>] <span style="color:#f92672">=</span> $form_state[<span style="color:#e6db74">&#39;values&#39;</span>][<span style="color:#e6db74">&#39;view_mode&#39;</span>];
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Again, pretty simple stuff. We just make sure that the <em>$form_state[&lsquo;conf&rsquo;]</em> has the values entered. Now, the next callback we defined in <em>$plugin</em> is for rendering the pane:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#e6db74">/**
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> * Render the panel.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> */</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">mymodule_taxonomy_root_term_render</span>($subtype, $conf, $args, $contexts) {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ($context<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">empty</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span>  } 
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// Get full term object for the root term.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  $term <span style="color:#f92672">=</span> <span style="color:#a6e22e">ctools_context_keyword_substitute</span>($conf[<span style="color:#e6db74">&#39;term&#39;</span>], <span style="color:#66d9ef">array</span>(), $contexts);
</span></span><span style="display:flex;"><span>  $parent_array <span style="color:#f92672">=</span> <span style="color:#a6e22e">taxonomy_get_parents_all</span>($term);
</span></span><span style="display:flex;"><span>  $root <span style="color:#f92672">=</span> <span style="color:#a6e22e">end</span>($parent_array);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// Render as a block.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  $block <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#66d9ef">stdClass</span>();
</span></span><span style="display:flex;"><span>  $block<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">module</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;entity&#39;</span>;
</span></span><span style="display:flex;"><span>  $block<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">delta</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;taxonomy_term-&#39;</span> <span style="color:#f92672">.</span> <span style="color:#a6e22e">str_replace</span>(<span style="color:#e6db74">&#39;-&#39;</span>, <span style="color:#e6db74">&#39;_&#39;</span>, $conf[<span style="color:#e6db74">&#39;view_mode&#39;</span>]);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  $entity <span style="color:#f92672">=</span> <span style="color:#a6e22e">entity_load_single</span>(<span style="color:#e6db74">&#39;taxonomy_term&#39;</span>, $root<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">tid</span>);
</span></span><span style="display:flex;"><span>  $block<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">content</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">entity_view</span>(<span style="color:#e6db74">&#39;taxonomy_term&#39;</span>, <span style="color:#66d9ef">array</span>($root), $conf[<span style="color:#e6db74">&#39;view_mode&#39;</span>]);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> $block;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>First we make sure there is information - ie the taxonomy term ID we need - in the pane&rsquo;s context. Then we get the root term object and render it in the requested display mode. The only requirement for the return here is that it be a <a href="https://drupal.org/node/930760">Drupal render array</a>. So depending on your use case, you can return an image, a field&hellip; whatever you like. In most cases a block is a convenient wrapper for whatever you have to return, which is what I did here.</p>
<p>This is as far as you have to go. The admin info callback isn&rsquo;t actually required, just don&rsquo;t include it in the <em>$plugin</em> array and you&rsquo;ll be fine. But if you want to make your life easier as a site admin, it&rsquo;s definitely a nice to have.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#e6db74">/**
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> * Admin info.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> */</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">mymodule_taxonomy_root_term_info</span>($subtype, $conf, $contexts) {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#66d9ef">empty</span>($conf)) {
</span></span><span style="display:flex;"><span>    $content <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&lt;p&gt;&lt;b&gt;Term ID:&lt;/b&gt; &#39;</span> <span style="color:#f92672">.</span> $conf[<span style="color:#e6db74">&#39;term&#39;</span>] <span style="color:#f92672">.</span> <span style="color:#e6db74">&#39;&lt;/p&gt;&#39;</span>;
</span></span><span style="display:flex;"><span>    $content <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&lt;p&gt;&lt;b&gt;View mode:&lt;/b&gt; &#39;</span> <span style="color:#f92672">.</span> $conf[<span style="color:#e6db74">&#39;view_mode&#39;</span>] <span style="color:#f92672">.</span> <span style="color:#e6db74">&#39;&lt;/p&gt;&#39;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    $block <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#66d9ef">stdClass</span>;
</span></span><span style="display:flex;"><span>    $block<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">title</span> <span style="color:#f92672">=</span> $conf[<span style="color:#e6db74">&#39;override_title&#39;</span>] <span style="color:#f92672">?</span> $conf[<span style="color:#e6db74">&#39;override_title_text&#39;</span>] <span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;&#39;</span>;
</span></span><span style="display:flex;"><span>    $block<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">content</span> <span style="color:#f92672">=</span> $content;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> $block;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This just provides the administrative summary which you can see in the Panels UI. Again, Panels will be happy with any render array return you throw at it, so I use a block.</p>
<h2 id="this-is-why-we-have-nice-things">This is why we have nice things</h2>
<p>Anyone who&rsquo;s worked with me knows that I&rsquo;m not a huge fan of the panels everywhere approach. But I use it often, simply because it makes custom layouts and totally custom page pieces so easy to do. Duplicating even this very simple functionality in a block is actually harder than this. You&rsquo;re still using about 3 functions, but you&rsquo;d have to determine in advance where that TID will come from. It would certainly come out less flexible, and actually probably harder to maintain. With Ctools all your related code sits in one place, and your module structure actually helps you see what&rsquo;s going on where.</p>
<p>If you learn how to do elements like this, you&rsquo;ll find Panels creeping into more and more of your builds. And rightfully so.</p>
]]></content>
    </entry>
  <entry>
    <title type="html"><![CDATA[44,497 people are wrong: how to NEVER need Views PHP.]]></title>
    <link href="https://ohthehugemanatee.org/blog/2013/12/26/44497-people-are-wrong-how-to-never-use-views-php/"/>
    <id>https://ohthehugemanatee.org/blog/2013/12/26/44497-people-are-wrong-how-to-never-use-views-php/</id>
    <author>
      <name>Campbell Vertesi (ohthehugemanatee)</name>
    </author>
    <published>2013-12-26T12:01:44+00:00</published>
    <updated>2013-12-26T12:01:44+00:00</updated>
    <content type="html"><![CDATA[<p>You&rsquo;re building a View, but you can&rsquo;t get that field to display the way you want it to. Or filter, or sort. Or maybe you have some data in a custom table that you want to include in the View. So you look for a contributed module, and <a href="https://www.drupal.org/project/views_php">Views PHP</a> looks like the answer to your problem! Until you read the module page, where it says:</p>
<blockquote>
<p>&ldquo;&hellip;it is highly advisable to use regular handlers and plugins when available (or even to create one yourself). Take note that filtering and sorting a view using PHP always has a considerable perfomance impact.&rdquo;</p>
</blockquote>
<p>As of this writing, <em>44,497</em> site maintainers have read that warning and chosen to ignore it. <strong>They&rsquo;ve chosen to put their PHP into a non-revisioned, difficult-to-access place, and to enable PHP input in a module that was never designed for security. They&rsquo;ve left their site at risk of a very difficult to diagnose and even harder to fix WSOD</strong>.</p>
<p>I&rsquo;m going to go out on a limb here, and suggest that in many of these cases, the decision was made because someone had the impression that writing a Views handler or Plugin was difficult. I&rsquo;m here to tell you that&rsquo;s not so: it&rsquo;s actually quite easy.</p>
<h2 id="what-were-doing">What we&rsquo;re doing</h2>
<p>We&rsquo;re going to tell Views about the structure of the data we want to display, filter, or sort - even if there&rsquo;s not actually a new data source involved, that&rsquo;s how you do it - and then we&rsquo;ll write the function that actually does the filter/sort/etc by improving an existing field display/filter/sort that Views already includes.</p>
<p>This process will work for:</p>
<ul>
<li>Defining a new data source for Views, ie something your module keeps in the DB.</li>
<li>Creating multiple field displays/filters/sorts for an existing field.</li>
<li>Creating a completely computed field display/filter/sort, with nothing in the DB.</li>
</ul>
<p>I know that in 99% of use cases for Views PHP, you don&rsquo;t need to define a new data source, table, adn fields. Trust me that this is the easiest way to learn it, though. I promise we&rsquo;ll get to your use case before the end of the post.</p>
<h1 id="how-to">How to</h1>
<p>I&rsquo;ll assume you have a custom module built, with a .info and .module file, but nothing in there yet. We&rsquo;ll call our module &ldquo;mymodule&rdquo; for the example.</p>
<ol>
<li>Tell Views about your module</li>
</ol>
<hr>
<p>We implement <em><a href="https://api.drupal.org/api/views/views.api.php/function/hook_views_api/7">hook_views_api</a></em> to let Views know that our module provides some code for Views, and what version of the Views API we&rsquo;re using.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#f92672">&lt;?</span><span style="color:#a6e22e">php</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">/**
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> * Implements hook_views_api().
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> */</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">mymodule_views_api</span>() {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">array</span>(
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;api&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#ae81ff">3</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;path&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#a6e22e">drupal_get_path</span>(<span style="color:#e6db74">&#39;module&#39;</span>, <span style="color:#e6db74">&#39;mymodule&#39;</span>) <span style="color:#f92672">.</span> <span style="color:#e6db74">&#39;/views&#39;</span>,
</span></span><span style="display:flex;"><span>  );
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Couldn&rsquo;t be simpler. We declare that we&rsquo;re using Views API 3, and that our Views code will all live in the <em>/views</em> subdirectory of our module.</p>
<ol start="2">
<li>Tell Views about your custom code</li>
</ol>
<hr>
<p>Now that Views knows to look in our <em>/views</em> directory, we should populate it. Views will look for a file called <em>modulename.views.inc</em> in that directory, so this is where we will put our Views hooks. There are lots of Views interventions you can do in this file, but we&rsquo;re only interested in one: <em><a href="https://api.drupal.org/api/views/views.api.php/function/hook_views_data/7">hook_views_data</a></em>.</p>
<p>This hook lets you define new data sources to Views, and for each one show how to render a field, how to Filter results, and how to Sort results based on your new data source. I promised you three use cases up there though, and here&rsquo;s the trick: you don&rsquo;t have to have an actual data source. You can define a filter for a database field that&rsquo;s already described elsewhere.</p>
<p>First let&rsquo;s look at a real field definiton though, because it&rsquo;s simpler. Here&rsquo;s how we would define a real DB table as a data source. The table looks like this:</p>
<!-- raw HTML omitted -->
<p>So here&rsquo;s our implementation of <em>hook_views_data</em>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#e6db74">/**
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> * Implements hook_views_data().
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> */</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">mymodule_views_data</span>() {
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// Build an array named after each DB table you&#39;re describing. In our case,
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#75715e">// just mymodule_table.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  $data[<span style="color:#e6db74">&#39;mymodule_table&#39;</span>] <span style="color:#f92672">=</span> <span style="color:#66d9ef">array</span>(
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// First give some general information about the table as a data source.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#e6db74">&#39;table&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#66d9ef">array</span>(
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">// The grouping for this field/filter/sort in the Views UI.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>      <span style="color:#e6db74">&#39;group&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#a6e22e">t</span>(<span style="color:#e6db74">&#39;Example Views Stuff&#39;</span>),
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#39;base&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#66d9ef">array</span>(
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;field&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#39;naid&#39;</span>, <span style="color:#75715e">// This is the identifier field for the view.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#e6db74">&#39;title&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#a6e22e">t</span>(<span style="color:#e6db74">&#39;Example Views API Data&#39;</span>),
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;help&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#a6e22e">t</span>(<span style="color:#e6db74">&#39;Names provided by the Mymodule module.&#39;</span>),
</span></span><span style="display:flex;"><span>      ),
</span></span><span style="display:flex;"><span>    ),
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Now we describe each field that Views needs to know about, starting 
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// with the identifier field.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#e6db74">&#39;naid&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#66d9ef">array</span>(
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#39;title&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#a6e22e">t</span>(<span style="color:#e6db74">&#39;Name ID&#39;</span>),
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#39;help&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#a6e22e">t</span>(<span style="color:#e6db74">&#34;The unique Name ID.&#34;</span>),
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#39;field&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#66d9ef">array</span>(
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;handler&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#39;views_handler_field_numeric&#39;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;click sortable&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#66d9ef">TRUE</span>,
</span></span><span style="display:flex;"><span>      ),
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#39;sort&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#66d9ef">array</span>(
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;handler&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#39;views_handler_sort&#39;</span>,
</span></span><span style="display:flex;"><span>      ),
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#39;filter&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#66d9ef">array</span>(
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;handler&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#39;views_handler_filter_numeric&#39;</span>,
</span></span><span style="display:flex;"><span>      ),
</span></span><span style="display:flex;"><span>    ),
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Now the name field.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#e6db74">&#39;name&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#66d9ef">array</span>(
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#39;title&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#a6e22e">t</span>(<span style="color:#e6db74">&#39;Name&#39;</span>),
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#39;help&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#a6e22e">t</span>(<span style="color:#e6db74">&#34;The Name.&#34;</span>),
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#39;field&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#66d9ef">array</span>(
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;handler&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#39;views_handler_field&#39;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;click sortable&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#66d9ef">TRUE</span>,
</span></span><span style="display:flex;"><span>      ),
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#39;sort&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#66d9ef">array</span>(
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;handler&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#39;views_handler_sort&#39;</span>,
</span></span><span style="display:flex;"><span>      ),
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#39;filter&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#66d9ef">array</span>(
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;handler&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#39;views_handler_filter_string&#39;</span>,
</span></span><span style="display:flex;"><span>      ),
</span></span><span style="display:flex;"><span>    ),
</span></span><span style="display:flex;"><span>  );
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> $data;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This is a pretty simple example, and I think the array structure speaks for itself. First you provide some general information about the table, then you create a sub-array for each field on the table. Each field&rsquo;s array should be named after the field, and provide at least title. Of course it wouldn&rsquo;t be useful if you didn&rsquo;t describe the handlers for any field/sort/filter operations you want to expose. For each one of these you just provide the name of the handler. In this example I used all built-in filters that come with Views, but it&rsquo;s easy enough to provide a custom handler.</p>
<p>Many added behaviors in Views start with <em>hook_views_data</em>; this only covers the basics. You can also open fields up as arguments or relationships, or even add built-in relationships. For example, if our table also contained an NID field, we could define a relationship so that node fields are always available when listing names, and vice versa. This stuff is all surprisingly easy to do, it&rsquo;s just not the focus of this post.</p>
<ol start="3">
<li>Write your custom handler</li>
</ol>
<hr>
<p>Let&rsquo;s say we want to provide our own field handler for the name field. Maybe we want it to automatically separate first names. This is easy, too! You simply decide on a name for your new handler - by convention it should begin with <em>modulename_handler_type_</em>, so we&rsquo;ll use <em>mymodule_handler_field_firstname</em>. Here&rsquo;s the relevant part of that <em>$data</em> array from before:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Now the name field.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#e6db74">&#39;name&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#66d9ef">array</span>(
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#39;title&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#a6e22e">t</span>(<span style="color:#e6db74">&#39;Name&#39;</span>),
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#39;help&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#a6e22e">t</span>(<span style="color:#e6db74">&#34;The Name.&#34;</span>),
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#39;field&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#66d9ef">array</span>(
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;handler&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#39;mymodule_handler_field_firstname&#39;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;click sortable&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#66d9ef">TRUE</span>,
</span></span><span style="display:flex;"><span>      ),
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>
</span></span></code></pre></div><p>Not exactly rocket science, is it?</p>
<p>Now we create a file named after the handler, also in the <em>/views</em> subdirectory. Though you could write your own handler class from scratch, you&rsquo;ll almost never have to. It&rsquo;s much easier to just extend an existing class.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#f92672">&lt;?</span><span style="color:#a6e22e">php</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">/**
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> * @file
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> * Definition of mymodule_handler_field_firstname.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> */</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">/**
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> * Provide the first name only from the name field.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> *
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> * @ingroup views_filter_handlers
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> */</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">mymodule_handler_field_firstname</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">views_handler_field</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">/**
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  * Render the name field.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  */</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">render</span>($values) {
</span></span><span style="display:flex;"><span>    $value <span style="color:#f92672">=</span> $this<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">get_value</span>($values);
</span></span><span style="display:flex;"><span>    $return <span style="color:#f92672">=</span> <span style="color:#a6e22e">explode</span>(<span style="color:#e6db74">&#39; &#39;</span>, $value);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#39;First name: &#39;</span> <span style="color:#f92672">.</span> $return[<span style="color:#e6db74">&#39;0&#39;</span>];
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>You see the pattern we&rsquo;re following: just name a handler, then extend an existing Views handler class to do what you want. You can override options forms, the admin summary&hellip; really any aspect of the way Views handles this data. And the pattern is the same for fields, sorts, filters, and arguments.</p>
<p>Once you&rsquo;ve created your handler&rsquo;s <em>.inc</em> file, you have to make sure your module loads it. So edit your module&rsquo;s <em>.info</em> file thusly:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ini" data-lang="ini"><span style="display:flex;"><span><span style="color:#a6e22e">name</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">My Module</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">description</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">Demo module from ohthehugemanatee.org</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">core</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">7.x</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">files[]</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">views/mymodule_handler_field_firstname.inc</span>
</span></span></code></pre></div><ol start="4">
<li>Multiple filters for one field</li>
</ol>
<hr>
<p>We all understand how this works for data that you&rsquo;re declaring for the first time in Views. But what if you want to provide multiple handlers for a single field? Maybe there are several different ways to filter or sort it. For most use cases, you should just follow the pattern above, and simply override the Views options form in your handler class. But occasionally you really do need multiple handlers.</p>
<p>So let&rsquo;s add a second and third field handler for our <em>name</em> field:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Now the name field. This is the first, and &#39;real&#39; definition for this field.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#e6db74">&#39;name&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#66d9ef">array</span>(
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#39;title&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#a6e22e">t</span>(<span style="color:#e6db74">&#39;Name&#39;</span>),
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#39;help&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#a6e22e">t</span>(<span style="color:#e6db74">&#34;The Name.&#34;</span>),
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#39;field&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#66d9ef">array</span>(
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;handler&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#39;mymodule_handler_field_firstname&#39;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;click sortable&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#66d9ef">TRUE</span>,
</span></span><span style="display:flex;"><span>      ),
</span></span><span style="display:flex;"><span>    ),
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;name_last&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#66d9ef">array</span>(
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#39;title&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#a6e22e">t</span>(<span style="color:#e6db74">&#39;Last name&#39;</span>),
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#39;help&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#a6e22e">t</span>(<span style="color:#e6db74">&#39;The Last name, extracted from the Name field&#39;</span>),
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#39;real field&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#39;name&#39;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#39;field&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#66d9ef">array</span>(
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;handler&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#39;mymodule_handler_field_lastname&#39;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;click sortable&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#66d9ef">TRUE</span>,
</span></span><span style="display:flex;"><span>      ),
</span></span><span style="display:flex;"><span>    ),
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;name_backwards&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#66d9ef">array</span>(
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#39;title&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#a6e22e">t</span>(<span style="color:#e6db74">&#39;Evil Genius Name&#39;</span>),
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#39;help&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#a6e22e">t</span>(<span style="color:#e6db74">&#39;The name, reversed so it sounds like the name of an evil genius.&#39;</span>),
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#39;real field&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#39;name&#39;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#39;field&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#66d9ef">array</span>(
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;handler&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#39;mymodule_handler_field_evil&#39;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;click sortable&#39;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#66d9ef">TRUE</span>,
</span></span><span style="display:flex;"><span>        ),
</span></span><span style="display:flex;"><span>      ),
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>
</span></span></code></pre></div><p>Can you spot the difference? All you have to do is add a variable for <em>real field</em>, which tells Views the field name to use for the source value, and that&rsquo;s it. Everything else is totally identical to a normal field. By custom we prefix the &ldquo;virtual&rdquo; field&rsquo;s name with the name of the real field, but that&rsquo;s as complicated as it gets.</p>
<h1 id="conclusion">Conclusion</h1>
<p>If there&rsquo;s one thing I want you to take away from this blog post, it&rsquo;s that <strong>the Views API is actually really easy</strong>. And if you can&rsquo;t find something online, take a moment to actually look at the <a href="https://api.drupal.org/api/views/views.api.php/">API documentation included with the module</a>. It&rsquo;s <em>very</em> thorough, and easy to read. If you feel like you understand how this works, but the doco doesn&rsquo;t quite cover what you&rsquo;re trying to do, look for examples in the Views module itself! There are 169 handlers for every concievable kind of case, just within Views. Find something reasonable and build off of that!</p>
<p>With this in mind, it&rsquo;s only 24 lines of simple code to provide your own handler for an existing field. After that 24 lines, you&rsquo;re doing the same things you were planning to do in views_php&hellip; but now you&rsquo;re doing them in a real coding environment, with a revisioning system, and where it&rsquo;s easy to track down and fix errors that could otherwise crash your site. 24 lines of array definition can save you a world of hurt. I hope to see those views_php installation numbers dropping soon.</p>
]]></content>
    </entry>
  <entry>
    <title type="html"><![CDATA[Custom Context conditions]]></title>
    <link href="https://ohthehugemanatee.org/blog/2013/12/02/custom-context-conditions/"/>
    <id>https://ohthehugemanatee.org/blog/2013/12/02/custom-context-conditions/</id>
    <author>
      <name>Campbell Vertesi (ohthehugemanatee)</name>
    </author>
    <published>2013-12-02T09:06:49+00:00</published>
    <updated>2013-12-02T09:06:49+00:00</updated>
    <content type="html"><![CDATA[<p>One of the big advantages to using the <a href="https://drupal.org/project/context" title="Context Module on drupal.org">Context module</a> is how totally extensible it is. Not only can you use and re-use the built in conditions, you can write your own. This brings all the power of the custom PHP evaluation method of block placement, but in a structure that makes your code re-usable, contributable, versioned, and standards-based. Writing a custom Context Condition is also a great template for how to integrate custom behaviors in many of the more complex Drupal modules such as Views and Search_API. We&rsquo;ll see this pattern again and again, and this is about the most basic one to demonstrate with.</p>
<p>My task was to determine if the displayed node was entity-referenced as being the &ldquo;special&rdquo; node from it&rsquo;s parent organic group. It&rsquo;s a weird requirement (which is exactly why a custom Condition makes sense here), so let me explain that again. On a site with Organic Groups, the Group node has an entityreference field, which marks one of the Group member nodes as special. When the user is viewing this special node, our Rules condition should evaluate to positive.</p>
<p>The first prerequisite is to make absolutely certain that you can&rsquo;t do this using any of the built in Conditions, and something this unique definitely qualifies there. So let&rsquo;s get to the implementation in our custom module. The module will be called CCC for Custom Context Condition.</p>
<p>{% include_code ccc.info lang:ini modules/ccc/ccc.info %}</p>
<p>That&rsquo;s a totally normal .info file, with logical dependencies on OG, EntityReference, and Context modules. Let&rsquo;s have a look at the .module file. This is probably a lot simpler than you expected.</p>
<p>{% codeblock lang:php ccc.module %}
/**</p>
<ul>
<li>Impelements hook_context_plugins().
*/
function ccc_context_plugins() {
$plugins = array(
&lsquo;ccc_condition_og_special_node&rsquo; =&gt; array(
&lsquo;handler&rsquo; =&gt; array(
&lsquo;path&rsquo; =&gt; drupal_get_path(&lsquo;module&rsquo;, &lsquo;ccc&rsquo;) . &lsquo;/plugins/context&rsquo;,
&lsquo;file&rsquo; =&gt; &lsquo;ccc_condition_og_special_node.inc&rsquo;,
&lsquo;class&rsquo; =&gt; &lsquo;ccc_condition_og_special_node&rsquo;,
&lsquo;parent&rsquo; =&gt; &lsquo;context_condition&rsquo;,
),
),
);
return $plugins;
}
{%endcodeblock %}</li>
</ul>
<p>First we implement <em>hook_context_plugins()</em>, to declare our new condition plugin to Context. This function should return an array of plugins, keyed by plugin name (in our case, ccc_condition_og_special_node). For each plugin, you have to explain to Context some basic information about the handler you&rsquo;re going to write.</p>
<ul>
<li><strong>path</strong> The path to the plugin file. By convention you should put it in your module&rsquo;s directory, under /plugins/context.</li>
<li><strong>file</strong> The filename to look for. Keep yourself sane, and name it after the plugin you&rsquo;re writing.</li>
<li><strong>class</strong> The name of the Class you&rsquo;re about to write. If you&rsquo;ve never written a PHP class before, this is good practice for D8 and object oriented code in general. Think of it like a function name, and again: name it after the plugin you&rsquo;re writing.</li>
<li><strong>parent</strong> The Class you are extending to create your condition. If you don&rsquo;t know what to put here, just enter &lsquo;context_condition&rsquo;.</li>
</ul>
<p>Now that Context knows about your plugin, you have to declare it to the UI in order to use it! For this we implement <em>hook_context_registry</em>. This function returns an array keyed by plugin type&ndash;in this case, &ldquo;conditions&rdquo;. For each condition (keyed by condition name), we need title, description, and plugin.</p>
<p>{% codeblock lang:php ccc.module %}
/**</p>
<ul>
<li>Implements hook_context_registry().
*/
function ccc_context_registry() {
$registry = array(
&lsquo;conditions&rsquo; =&gt; array(
&lsquo;ccc_condition_og_special_node&rsquo; =&gt; array(
&rsquo;title&rsquo; =&gt; t(&lsquo;OG Special Node&rsquo;),
&lsquo;description&rsquo; =&gt; t(&lsquo;Set this context based on whether or not the node is the &ldquo;Special Node&rdquo; entityreferenced in the parent OG.&rsquo;),
&lsquo;plugin&rsquo; =&gt; &lsquo;ccc_condition_og_special_node&rsquo;,
),
),
);
return $registry;
}
{% endcodeblock %}</li>
</ul>
<p>Now Context module knows everything it needs to know about your plugin and condition, we have to tell Drupal when to evaluate your condition. You can implement whatever hook make sense for you here, the important part is that you execute your plugin. Since our condition only makes sense after everything else has fired (ie when the OG context is well and firmly set), we&rsquo;ll implement <em>hook_context_page_reaction()</em>.</p>
<p>{% codeblock lang:php ccc.module %}
/**</p>
<ul>
<li>Implements hook_context_page_reaction().</li>
<li></li>
<li>Executes our OG Special Node Context Condition.</li>
<li>Gotta run on context_page_reaction, so Views and OG have a chance to</li>
<li>set/modify Group context.
*/
function ccc_context_page_reaction() {
$group = og_context();
// Only execute the group node context condition if there is a group node
// in context.
if ($group) {
$plugin = context_get_plugin(&lsquo;condition&rsquo;, &lsquo;ccc_condition_og_special_node&rsquo;);
if ($plugin) {
$plugin-&gt;execute($group);
}
}
}
{% endcodeblock %}</li>
</ul>
<p>That&rsquo;s it for your module file. Just declare the plugin to Context and its UI, and find a place to actually execute the plugin. Now we&rsquo;ll write the actual handler class.</p>
<p>Create your plugin file in the place you promised Context to find it in your <em>hook_context_plugins()</em> implementation. In our case, this is plugins/context/ccc_condition_og_special_node.inc . We&rsquo;re going to extend Context&rsquo;s basic Condition Class to provide our own functionality. Here are the contents of my ccc_condition_og_special_node.inc file:</p>
<p>{% include_code lang:php modules/ccc/plugins/context/ccc_condition_og_special_node.inc %}</p>
<p>The trickiest part of this is in the Condition settings form and values. Context assumes that your settings form will be a series of checkboxes, and does a lot of internal processing based on that assumption. We don&rsquo;t want to mess any of that up, so there&rsquo;s a bit of dancing around the requirement here.</p>
<p>First we provide the function condition_values. Context needs to know in advance what the possible values are for the Condition&rsquo;s settings form, and this is where you return them. Based on this return, Context will build a settings form of checkboxes for you.</p>
<p>Then we override the settings form with condition_form(). I change the type of the form element to radio boxes, and set a default value.</p>
<p>Then I add my own submit handler, which merely takes the result of the radio box and puts it into an array, just like it would be if this was a checkbox.</p>
<p>Finally, we get to the good part: the execute function. If you recall, this is what we called in <em>ccc_content_page_reaction()</em>. Here we load the Group node, and use <em>entity_metadata_wrapper</em> to extract the value of the field_special_node entityreference field on that node. Then we test the current NID from the URL. Note that you never have to explicitly return FALSE; Context is only watching for TRUE returns.</p>
<p>When I learned how to do this, I found it surprisingly easy. The hardest part is wrestling with the Condition class to get exactly the behavior you like. Everyone ends up doing <em>some</em> dancing around here, so don&rsquo;t feel bad about it. Context&rsquo;s own Conditions are great examples. Have a look at the classes provided in context/plugins/context_condition_*.inc to get ideas for how to do this.</p>
]]></content>
    </entry>
  <entry>
    <title type="html"><![CDATA[Adding Rules to your contrib module (so you can reject half the tickets in your queue)]]></title>
    <link href="https://ohthehugemanatee.org/blog/2013/04/18/adding-rules-to-your-contrib-module-so-you-can-reject-half-the-tickets-in-your-queue/"/>
    <id>https://ohthehugemanatee.org/blog/2013/04/18/adding-rules-to-your-contrib-module-so-you-can-reject-half-the-tickets-in-your-queue/</id>
    <author>
      <name>Campbell Vertesi (ohthehugemanatee)</name>
    </author>
    <published>2013-04-18T00:00:00+00:00</published>
    <updated>2013-04-18T00:00:00+00:00</updated>
    <content type="html"><![CDATA[<!-- raw HTML omitted -->
]]></content>
    </entry>
  <entry>
    <title type="html"><![CDATA[Announcing the Resource Conflict Drupal module]]></title>
    <link href="https://ohthehugemanatee.org/2012/06/announcing-resource-conflict-drupal.html"/>
    <id>https://ohthehugemanatee.org/2012/06/announcing-resource-conflict-drupal.html</id>
    <author>
      <name>Campbell Vertesi (ohthehugemanatee)</name>
    </author>
    <published>2012-06-13T22:35:00+00:00</published>
    <updated>2012-06-13T22:35:00+00:00</updated>
    <content type="html"><![CDATA[
{% raw %}
<div class="css-full-post-content js-full-post-content">
I recently took over an aging Drupal module, <a href="http://drupal.org/project/resource_conflict">Resource Conflict</a>. It had a D6 version with a lot of outstanding bugs in the queue... I started by simply <a href="http://drupal.org/node/976522">rewriting it for D7 and my specific use case</a>, but ended up in a discussion with the module's old maintainer about a total rewrite for&nbsp;<a href="http://drupal.org/project/entity">Entities</a>&nbsp;and&nbsp;<a href="http://drupal.org/project/rules">Rules</a>. So <a href="http://drupal.org/node/1575800">that's what I did</a>, and I just released the <a href="http://ftp.drupal.org/files/projects/resource_conflict-7.x-3.x-dev.tar.gz">7.x-3.x-dev</a> version.<br /><br /><a href="http://drupal.org/project/resource_conflict">Resource Conflict</a> USED to be a module that detected booking conflicts in resources, and threw a form error. Resources were node reference field entries, and it supported date and event modules for the date/time. Resource Conflict version 3 is built on Entities and Rules,&nbsp;so the behavior is now totally customizable. This lets it support a wide variety of use cases.<br /><br /><b>How to use it</b><br />Out of the box, the module lets you enable Content Types for resource conflict checking, and you select which date field to use for each enabled content type. You do all this on the Content Type's edit page.<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-4twPmZsdmzM/T9kP9pKUeqI/AAAAAAAAABU/WplXGL8Ocfo/s1600/Screen+shot+2012-06-14+at+12.10.43+AM.png" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"><img border="0" height="380" src="http://1.bp.blogspot.com/-4twPmZsdmzM/T9kP9pKUeqI/AAAAAAAAABU/WplXGL8Ocfo/s640/Screen+shot+2012-06-14+at+12.10.43+AM.png" width="640" /></a></div><br /><br /><br />The module comes with a sample Rule for you, which throws a form error any time you try to save a Resource Conflict enabled node with a date that overlaps another Resource Conflict enabled node.<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-4NAMGMI4658/T9kQ20ThSRI/AAAAAAAAABc/LOy6nHdUDy8/s1600/Screen+shot+2012-06-14+at+12.14.34+AM.png" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"><img border="0" height="364" src="http://4.bp.blogspot.com/-4NAMGMI4658/T9kQ20ThSRI/AAAAAAAAABc/LOy6nHdUDy8/s640/Screen+shot+2012-06-14+at+12.14.34+AM.png" width="640" /></a></div><br />But this is not a very realistic use case. More likely you will want to edit the rule to add some more conditions - for example, maybe a resource conflict on your site means overlapping taxonomy terms. Or entity references. Or titles. Or anything at all!<br /><br />To give an example of how complex this can go - on a site I recently launched, I have two kinds of resource conflict events. "Hard" conflicts are when two bookings at the same time reference the same user or taxonomy term. &nbsp;Hard conflicts throw a form error and prevent saving the node.&nbsp;This is just like the above case, and it's a really simple modification on the default Rule. &nbsp;"Soft" conflicts are when you try to book a taxonomy term that is a parent or child of a term in an existing booking, or a user who is tagged with a term or child of a term that is already booked. For example, maybe I try to book the taxonomy term "Maintenance", but the sub-term "Plumbers" is already booked at the same time. Or maybe I try to book John Doe, who is tagged as a "Plumber", but Maintenance is already booked at that time. &nbsp;Soft conflicts can be booked, but they create a node to record the conflict.<br /><br />Other people have asked about using the module to integrate with Organic Groups, or to control bookings of finite resources - you could easily use Rules to build those functionalities. Best of all, it's all exposed and easy for you to maintain.<br /><br />Here's a run down of the Rules components included with <a href="http://drupal.org/project/resource_conflict">Resource Conflict 7</a>:<br /><ul><li><b>EVENT: A Resource Conflict Node Form is Validated</b>: This rule fires during node form validation on Resource Conflict enabled content types. You should use this event if you want to set form errors, or if you want to interact with Rules_forms module. It provides both a node object of the node being created/edited and a form object for use with rules_forms. This is the event trigger for the default Rule.</li><li><b>CONDITION: Contains a Resource Conflict:</b> Evaluate a node object for conflicts. Returns TRUE if there are conflicts for the node.</li><li><b>ACTION: Load a List of Conflicting Nodes</b>: Creates a list of nodes that conflict with the given node.</li><li><b>ACTION: Set a Form Validation Error</b>: Stores a form validation error to be fired the next time a validation hook is called on a conflict-enabled node. This is intended for use with the "A Resource Conflict Node Form is Validated" Event.</li></ul><div><br /></div><div><b>Future plans</b></div><div><b><br /></b></div><div>I'm pretty happy with this initial dev release; it solves a lot of problems quite elegantly. But there are a few remaining. Here are the items I'm planning on knocking out first.</div><div><ul><li><b>Drupal 6 backport:</b>&nbsp;I'll release a 6.x-3.x branch which uses Rules for reactions. The biggest issue here is that <a href="http://drupal.org/project/rules_forms">rules_forms module</a> doesn't exist for D6, which makes it impossible to throw a form validation error from within Rules. I may have to write a custom Rules action to do this.</li><li><b>Full Entities integration:</b>&nbsp;I'd like to generalize the module out to support ALL fieldable entities.&nbsp;</li><li><b>Better Integration with rules_forms</b>: rules_forms is pretty cool, and even cooler is the new version they're working on, that doesn't rely on the "form" Rules object. I'm looking forward to this, because it means we'll be able to do cooler things with resource_conflict.</li></ul><div><br /></div></div>
</div>
{% endraw %}
]]></content>
    </entry>
  <entry>
    <title type="html"><![CDATA[Drupal developers&#39; toolkit: handy tools and functions to make your life easier]]></title>
    <link href="https://ohthehugemanatee.org/2012/06/drupal-developers-toolkit-handy-tools.html"/>
    <id>https://ohthehugemanatee.org/2012/06/drupal-developers-toolkit-handy-tools.html</id>
    <author>
      <name>Campbell Vertesi (ohthehugemanatee)</name>
    </author>
    <published>2012-06-08T17:23:00+00:00</published>
    <updated>2012-06-08T17:23:00+00:00</updated>
    <content type="html"><![CDATA[
{% raw %}
<div class="css-full-post-content js-full-post-content">
Drupal is big and complex, and no matter how good you are, you will need to debug. Before you get started coding for a Drupal site, you should download and enable the very useful <a href="http://drupal.org/project/devel">devel</a> module on your dev site. Go ahead, I'll wait.<br /><br />This primer covers all the tools that I'll use in later tutorials on this blog. In the real world I end up using 5-6 of these guys regularly. Learn them. They help.<br /><h3>    drupal_set_message()</h3><div>Printing a message is the basic tool of any debugging, and you need to know this core function. This lets you print a message to the page, Drupal-style. Usage: drupal_set_message($message, $severity).</div><div><br /></div><div><code>drupal_set_message(t('Hello %name!', array('%name' =&gt; 'John Doe')), 'warning');</code>&nbsp;</div><div><br /></div><div>Note that I use the t() function to process text in drupal_set_message. This is partly because the function itself doesn't do any text sanitizing, so it's good practice to insert a layer there. It's also because you can't &nbsp;insert variables directly into the message, and t() is a convenient way of doing that.</div><div><br /></div><div>Note that drupal_set_message() does not do well with large messages - it is not recommended to print big arrays directly to the message area. For that, we'll use another function:</div><h3>    dpm()</h3><div>This sets a variable of your choice to Drupal's messaging system, in a nice compact output handled by krumo.&nbsp;</div><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-H4xCqcjlhF8/T9IuHpEFIMI/AAAAAAAAAA8/lctbEESP66E/s1600/Screen+shot+2012-06-08+at+6.53.24+PM.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="289" src="http://3.bp.blogspot.com/-H4xCqcjlhF8/T9IuHpEFIMI/AAAAAAAAAA8/lctbEESP66E/s320/Screen+shot+2012-06-08+at+6.53.24+PM.png" width="320" /></a></div><div>Most of Drupal is understandable and learnable on the fly with just this simple tool. Usage: dpm($variable, $name = NULL).</div><div><br /></div><div><code>dpm($node, 'This is the node variable');</code></div><div><br /><h3>   kpr()</h3><div>Just like dpm, but it prints to the page header rather than the Drupal message area. Helpful when your theme doesn't print messages. You can also have it return a string instead of printing it automatically, which comes in handy in some fairly bizarre circumstances. Usage: kpr($variable, $return = FALSE, $name = NULL).&nbsp;</div><div><br /></div><div><code>kpr($node, FALSE, 'This is the node variable');</code></div><div><br /></div><h3>   dvm()</h3><div>OK, you don't like krumo. Maybe you're a masochist, or maybe you have some esoteric requirements to deal with. Either way, you want dvm(). It prints variables in a more traditional format into the message area. I have used this to get variables into pastebin, very helpful when asking for help on Drupal IRC channels. :) Usage: dvm($variable, $name = NULL).</div><div><br /></div><div><code>dvm($node, 'This is the node variable');</code></div><h3>   dpr()</h3></div><div>If your theme doesn't display messages, dpr() prints variables to the page header without krumo. Same usage case as above. Just like kpr(), you can return a string with this function. Usage: dpr($variable, $return = FALSE, $name = NULL).</div><div><br /></div><div><code>dpr($node, FALSE, 'This is the node variable');</code></div><div><br /></div><div><h3>  dargs()</h3></div><div>This guy shows you the arguments passed into the current function, using krumo for readability. This is my go-to function when using Drupal hooks. The API documentation is great, but there's nothing like simply seeing the variables you have to work with. Usage: dargs()</div><div><br /></div><code>function swearing_custom_form_alter(&amp;$form, &amp;$form_state, $form_id) {<br />&nbsp; dargs();<br />}</code><br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-N3-bpT3pgeI/T9Iy8ptSNkI/AAAAAAAAABI/FnlybyhHqeQ/s1600/Screen-shot-2012-06-08-at-7.12.02-PM.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="297" src="http://4.bp.blogspot.com/-N3-bpT3pgeI/T9Iy8ptSNkI/AAAAAAAAABI/FnlybyhHqeQ/s320/Screen-shot-2012-06-08-at-7.12.02-PM.png" width="320" /></a></div><div><h3> dd()</h3></div><div>For those awful times when a hook doesn't produce direct output, there's always dd(). This guy prints a given variable to a file called "drupal_debug.txt" in your site's temporary files directory. This comes in very handy. Usage: dd($variable, $name = NULL)</div><div><br /></div><div><code>dd($node, 'This is the node variable');</code></div><div><br /></div><h3> ddebug_backtrace()</h3><div>This prints a backtrace for the current function in krumo, in the head of your current page. Devel module comes with the ability to enable this automatically for fatal errors, but occasionally you just want to see how things work. Usage: ddebug_backtrace().</div><div><br /></div><h3> db_queryd()</h3><div>This tool is handy for testing queries. Devel also has the ability to display a query log at the bottom of every page, showing every query with a time-to-execute. That can be pretty overwhelming. db_queryd() lets you put in a single query and see if your database spits out any errors. Usage: db_queryd($query, $arguments = array())</div><div><br /></div><div><br /></div>
</div>
{% endraw %}
]]></content>
    </entry>
  <entry>
    <title type="html"><![CDATA[Drupal quick learning guides: Custom modules]]></title>
    <link href="https://ohthehugemanatee.org/2012/04/drupal-quick-learning-guides-custom.html"/>
    <id>https://ohthehugemanatee.org/2012/04/drupal-quick-learning-guides-custom.html</id>
    <author>
      <name>Campbell Vertesi (ohthehugemanatee)</name>
    </author>
    <published>2012-04-23T16:17:00+00:00</published>
    <updated>2012-04-23T16:17:00+00:00</updated>
    <content type="html"><![CDATA[
{% raw %}
<div class="css-full-post-content js-full-post-content">
Ah, it's nice to be done with the basic structure stuff. At this point, I'm going to assume that you know the basics of how to administer a Drupal site. You understand the <a href="http://swearingatcomputers.blogspot.com/2012/04/drupal-quick-learning-guides-drupal.html">file structure</a>, you know where to go to download <a href="http://drupal.org/project/themes">themes</a> and <a href="http://drupal.org/project/modules">modules</a>, and you know how to make sites out of the big pieces you can find that way. Awesome. This is where it gets fun.  I'm going to assume some basic knowledge of PHP, but there's nothing here that you can't pick up with some quick glances over at <a href="http://w3schools.com/php/">w3schools</a>, and maybe some experimentation on your own.<br /><br />I mentioned in the file structure post that the whole point of Drupal is that Everything Is Override-able. If you want to customize the site beyond what you get out of the box with some contributed modules, you're going to want to do it in your own module. That's right - it's incredibly easy to write your own Drupal module to insert whatever code you want into your particular Drupal site. In fact, it's the recommended way to customize your site, because it means that your code won't get mixed up with anything in Drupal's "core". If you update Drupal, you don't have to worry about refactoring your patches or anything like that, you've got one place to look for your custom behavior. More importantly, if someone else comes along to take care of the site after you're off the project, there's only one place for them to look for customizations.<br /><br /> A module at its most basic consists of a directory under sites/whatever/modules , a self-named .info file giving basic information about the module, and a self-named .module file with your code in it. In this quick learning guide, we'll build a "Hello World" module that prints some text on every page load. This is a quick guide - I'll get more into how to leverage Drupal in your code in later posts.<br /><br /> So let's create your custom module. Consider your module's name - Drupal has a single namespace for all modules and features, and it's easy to get confused with the theme namespace as well, so it's best to pick a name that is definitely not going to be used by any modules, features, or themes. Most big shops will have a custom module for most any site they build, and they just name it "Sitename Custom" or something similar. We're going to make a module called "Swearing Custom", to follow that convention.<br /><br /> First create the module directory. I like to keep my custom modules all under sites/all/modules/custom . Drupal will search subdirectories, so take advantage of that fact to keep your codebase tidy! We'll create the directory sites/all/modules/swearing_custom . Note the underscore instead of a space.<br /><br /> Then create the module's .info file. This file informs Drupal about your module's name, description, requirements, and other fundamentals. I like to think of it as anything that will go on the site's Modules listing. This file has to be named after the module, just like the directory was. Here's my swearing_custom.info file:<br /><br /> <code>name = Swearing at Computers Custom Module description = Custom tweaks and functionality for Swearing at Computers project = "swearing_custom" version = "7.x-1.x-dev" core = "7.x" package = "custom" dependencies[] = token </code><br /><br /> Most of those variables can be omitted, to be honest. All Drupal REALLY needs is name, description, project, and core. Notice how I defined a dependency, just for fun. I also like to put my custom code into a module group called "custom", so my modules list stays nice and tidy.  The norm is to add to the dependencies array with one dependency per line, for readability. You can similarly have a files[] array to add your own files to the module. By default this contains just the .info and  .module files, which is all we're using so I'm not adding a files[] line at all.<br /><br /> Now we'll create the module file itself. This is just a php file, with an opening  tag. The trouble is, how do you get your code to run? You can write all the functions you want, but how should Drupal know to call your code?<br /><br /> Aha, now we get to the interesting bit. Drupal modules are built around a system of "hooks". Each module defines a set of hooks, places for you to insert your custom code. And this isn't an edge case - it's totally core to how Drupal works. Big modules will have tens of hooks at your disposal... but we'll cover those a bit later. For now, we're just going to use one simple hook to get our "Hello world" code displayed: <a href="http://api.drupal.org/api/drupal/modules%21system%21system.api.php/function/hook_init/7">hook_init()</a>.<br /><br /> All hooks are named hook_something. It's how you know it's a hook. All the core hooks, and many of the contributed hooks, are documented on Drupal's excellent <a href="http://api.drupal.org/">API resource site</a>. When you're writing your custom module, you just declare a function named after the hook, replacing the word "hook" with your module's name. Drupal will find that function and run it for you. Simple as that.<br /><br /> Hook_init() is called early in the page build process, on every page of your site. This is a very powerful hook, usually used to define variables that you'll use later on. But we're just going to use it to print a message to the screen. To start with, my swearing_custom.module file looks like this:<br /><br /> <code>/**   * Implementation of hook_init().  */ swearing_custom_init() {   print "Hello world!"; } </code><br /><br />Pretty simple, right? That comment at the top is the standard format for Drupal. It's so that you can easily find where you used particular hooks (or where other contrib modules used them!), and it's used for a lot of Drupal's automated help and API resources. It's also nice and tidy, so it's a good habit to get into.<br /><br /> Then you see that I just declared a function named after the hook, added my code, and got out of there. At this point, if I enable this custom module I'll see "Hello world" in unformatted text at the top of every page. Simple, but ugly.<br /><br /> Enter another great feature of Drupal: a million and one helper functions. These are also well documented at <a href="http://api.drupal.org/">api.drupal.org</a>, and they're the functions that everyone - even Drupal's core itself - uses to get things done in a standardized way. For example, I hate the way that text appears. So let's update the module to use Drupal's own messaging system. This means using <a href="http://api.drupal.org/api/drupal/includes%21bootstrap.inc/function/drupal_set_message/7">drupal_set_message()</a>. Have a look at the API page to see the arguments for this function, but 90% of your use cases will be following this example. Here's a new version of swearing_custom.module:<br /><br /> <code>/**   * Implementation of hook_init().  */ swearing_custom_init() {   print "Hello world!";   drupal_set_message('Hello world!', 'status'); } </code><br /><br />That second argument tells Drupal the severity of the message: 'status', 'warning', or 'error'. Status is actually the default, so I'll cut it out of the next iteration of this code. The module now prints your message in a fancy, Drupal formatted way. It looks just like all the other Drupal modules, because that's how all of Drupal displays messages. <br /><br /> I'm going to add one more layer of complexity here, with the <a href="http://api.drupal.org/api/drupal/includes%21bootstrap.inc/function/t/7">t()</a> function. You'll see t() everywhere: it's the way you declare text strings to Drupal as user-facing text. It makes the text available for translation, and makes it easy to sanitize any variables or user-entered text. An example t() string would be:<br /><br /> <code>t('Welcome to %sitename', array('%sitename' =&gt; 'Swearing at Computers'); </code><br /><br /> You just include replacement patterns in the text itself, and then declare them in an array. The replacement strings get sanitized, so that's the right place to include user-entered text, URLs, or just variable output in general. So here is a final version of our custom module, using drupal_set_message() the way it was intended.<br /><br /> <code>/**   * Implementation of hook_init().  */ swearing_custom_init() {   print "Hello world!";   drupal_set_message(t('Hello world! This is %name!', array(%name =&gt; 'Swearing at Computers'))); } </code><br /><br /> That's it for this quick guide. The basics of writing a module. The hardest part here is figuring out which hooks to use. Google is your friend: try searching for things like "drupal views hooks" to see how to tweak Views at various stages, or "drupal form hooks" to see how forms work in Drupal. Or don't - I'll be covering some of those hooks in the next posts.
</div>
{% endraw %}
]]></content>
    </entry>
  <entry>
    <title type="html"><![CDATA[Drupal quick learning guides: Drupal structure]]></title>
    <link href="https://ohthehugemanatee.org/2012/04/drupal-quick-learning-guides-drupal.html"/>
    <id>https://ohthehugemanatee.org/2012/04/drupal-quick-learning-guides-drupal.html</id>
    <author>
      <name>Campbell Vertesi (ohthehugemanatee)</name>
    </author>
    <published>2012-04-16T14:01:00+00:00</published>
    <updated>2012-04-16T14:01:00+00:00</updated>
    <content type="html"><![CDATA[
{% raw %}
<div class="css-full-post-content js-full-post-content">
I've been lax about posting lately, and to make this easier on myself I think I'll post a bunch of quick guides for basic coding procedures with Drupal. Simple things and concepts, explored in just enough detail for you to understand how it works, resource links so you can actually go and put it into practice. <br /><br />The first thing you need to understand about Drupal is the structure. Drupal is a modular Content Management System, built on PHP and whatever-database-you-want-which-is-probably-mysql-lets-face-it. Drupal <=6.x actually requires MySQL or PostGres, and they're still the standard on 99% of installs you'll face.  The thing is, Drupal is incredibly flexible and capable. And the trick to coding with Drupal is to code WITH Drupal, not against it. There are tons of helper functions built in that make your life easier, if only you'll work the way Drupal expects you to work. So this first post is about how Drupal expects you to work.  Drupal itself is a complicated guy that lives in several php files and directories. You are expected to NEVER touch any of these files or directories yourself. Seriously. 16,000 coders can't be wrong, just leave it the fuck alone. You have access to OVERRIDE anything and everything that Drupal does though, and you can do that from a nice contained subdirectory where you can keep an eye on your code. This is the /sites subdirectory.  See, one Drupal codebase can actually host many websites. Each one gets its own subdirectory under /sites. for example, I might have:  /sites/swearingatcomputers.blogspot.com /sites/subdomain.swearingatcomputers.blogspot.com /sites/swearingatcomputers.blogspot.com.subdirectory  The directory name tells Drupal what incoming requests should be forwarded to which site. You can see how subdomains and subdirectories are handled in the naming convention, too. Pretty easy stuff. There's also a special subdirectory for "default", and one for "all". Not to complicated to figure out: "all" is for code that applies to all your sites, and "default" is the sites subdirectory for when other names don't match.  I'll tell you a pro secret: hardly any of the big shops ever actually use the multi-site capability. In practice it's a pain in the ass to remember which sites use which version of which module, and Drupal itself doesn't take up any significant space. So most of us just set up a separate Drupal codebase for each site, and use sites/default and sites/all for our code.  Inside each site directory you'll find:  * settings.php : This contains the database connection information, and any special settings that Drupal needs for similar low-level tasks. Set once, never modified. Doesn't exist in sites/all. * files : Any user-uploaded files. This one doesn't exist in the sites/all directory. * modules : any modules that are available to Drupal. This is where you'll keep the <a href="http://drupal.org/project">contributed modules</a> which are the majority of Drupal's capabilities. <br />* themes : This contains the themes - layouts - that are available to Drupal. <br /><br />I mentioned that most professional Drupal shops just use a separate codebase for each site they set up. They also don't mix and match between using sites/default and sites/all . This is because it's very easy to end up with a copy of the same module in two places, and it's hard to know which version Drupal is actually using. So everyone standardizes their own practice here. Personally, I keep modules and themes in sites/all . sites/default only contains settings.php and the files directory.<br /><br />Inside the modules directory you'll find all your contributed modules that you've downloaded. But this is also where you have to keep <a href="http://drupal.org/project/features">Features</a> (exportable collections of settings, very useful!) and any custom code that you write for your site. This presents a namespace problem. What if you create a feature called 'Views', to hold all the Drupal Views you have? You don't want to include it in the directory for the Views module... So underneath sites/all/modules , I create subdirectories custom_features and custom_modules. It's still not good practice to have duplicate module or feature names though, so it's wise to prefix your custom work with custom_ or the name of the project.<br /><br />That's all you need to know about the Drupal file structure. Once again, NEVER EVER HACK CORE. Don't touch anything outside of the 'sites' directory, and you'll be OK. There is always a way to override any behavior you like from inside the 'sites' directory, and that will make your life MUCH easier down the road, trust me.
</div>
{% endraw %}
]]></content>
    </entry>
  <entry>
    <title type="html"><![CDATA[On Drupal Entities, or how Organic Groups and Taxonomy are the same thing]]></title>
    <link href="https://ohthehugemanatee.org/2012/03/on-drupal-entities-or-how-organic.html"/>
    <id>https://ohthehugemanatee.org/2012/03/on-drupal-entities-or-how-organic.html</id>
    <author>
      <name>Campbell Vertesi (ohthehugemanatee)</name>
    </author>
    <published>2012-03-25T12:58:00+00:00</published>
    <updated>2012-03-25T12:58:00+00:00</updated>
    <content type="html"><![CDATA[
{% raw %}
<div class="css-full-post-content js-full-post-content">
I'm a big fan of the new Entities model for Drupal. I've been working a lot with it lately, and it makes a lot of sense... but my favorite part is how it keeps blowing away my old assumptions, inherited from 7 years of Drupal experience. <br /><br />Here's a big one that got me recently: Organic Groups is useless, because it's basically Taxonomy with a couple of neat add-ons. Or Organic Groups is incredibly useful, however you choose to think about it. <br /><br />Let's think about Taxonomy from the perspective of what it actually accomplishes. It's a fieldable (thanks D7) way to group content. Each Taxonomy Term is an object on its own, which is referenced by other content to provide groupings. There's nothing there that you can't do with a generic entity, entityreference module, and a block view on taxonomy landing pages. <br /><br />In D4-D6, Taxonomy was the best way to categorize content, especially if you want that categorization to be hierarchical in nature. Period. In D7... meh. You can build an entity that replaces taxonomy incredibly easily. In this sense, Taxonomy is useless. It could be removed from Drupal core, and treated as a great example of a well fleshed out Entity that fills a common use case. I look forward to seeing taxonomy reference replaced by entityreference, which will make the transformation complete.<br /><br />ON THE OTHER HAND, having this pre-built entity is incredibly useful. Because Taxonomy IS a good implementation of the Entity model, it is flexible enough to obsolete a lot of more complex modules in a lot of use cases... and saves you a fair amount of coding and configuration in the meanwhile. <br /><br />Now, I am a huge fan of Organic Groups, and in D6 it was the number one way to give flexible content groupings with any kind of membership. It always bugged me how much configuration you had to do for the simplest of Group structures, though. And in D7... now you can do a lot of what Organic Groups does with the Taxonomy Entity. I didn't think this was so until I really thought it through, and had an example to work with.<br /><br />So I had a site where we wanted to provide schedules for every user on the site, and allow Events to be scheduled for arbitrary groups as well. Each group should have a landing page with its own calendar for the group and all sub-groups. For example, the group calendar for "Company Executive" should include events for "Vice Presidents", "Chiefs", and "Chairpeople". Group membership is all centrally managed. And if you're a member of a group, you should receive update emails for every event that gets added to your group. <br /><br />In D6 this was a perfect use case for Organic Groups. In D7, I decided to do this with taxonomy instead. Why? The Ux for hierarchy creation and management is better in taxonomy because of the vast contrib ecosystem for it. What I would have built with Views, EntityReference, and custom code for nice hierarchical Ux in OG, is 80% built for me from day 1 with Taxonomy. Just apply the "Groups" taxonomy to the user object and the content types you want, and bam - you've just put Users and Content into semantic groups together. That's what OG, at it's core, provided for us in D6... and with some pre-built Views, is all it provided for a lot of projects.<br /><br />This led me down an interesting path of thought. What is the point of OG, if Taxonomy can duplicate its functionality so handily? <br /><br />And it dawned on me: all Organic Groups really offers is a fieldable Entity that interacts with Permissions in a way that is common for user-created groups. We could do this with Taxonomy and some custom code: write a module that offers permission limitations based on taxonomy term association with the user object, and then include a nice UI for adding terms to your user object by clicking a link on the taxonomy term page... you've got a solid competitor for OG. And at that point, I would start saying things like "why did you bother using Taxonomy, when OG would have done it out of the box?"<br /><br />And I think that's when I really got the power of entities. We've been used to seeing modules as a way to provide extra capabilities to Drupal. They can still do that, of course. But many of the best modules will just offer pre-configured Entities for popular use cases. Like an Entity that groups users and content, offers a way for users to join groups conveniently, and gives Permissions ramifications for group membership. Or an entity that lets you group other entities semantically into a hierarchy. The complex Organic Groups and the simple Taxonomy are only a couple of steps removed from each other... and both great examples of Entities in action.
</div>
{% endraw %}
]]></content>
    </entry>
  <entry>
    <title type="html"><![CDATA[The complete Drupal Cache - Serving HTTP and HTTPS content with Varnish]]></title>
    <link href="https://ohthehugemanatee.org/2011/05/complete-drupal-cache-serving-http-and.html"/>
    <id>https://ohthehugemanatee.org/2011/05/complete-drupal-cache-serving-http-and.html</id>
    <author>
      <name>Campbell Vertesi (ohthehugemanatee)</name>
    </author>
    <published>2011-05-22T21:07:00+00:00</published>
    <updated>2011-05-22T21:07:00+00:00</updated>
    <content type="html"><![CDATA[
{% raw %}
<div class="css-full-post-content js-full-post-content">
Varnish is a fantastic caching proxy, commonly used for CMSes.  It's not uncommon to see benchmarks boasting 300-500 page loads per second - I've seen benches up to 5000 hits per second.  That's faster than serving flat HTML from Apache; we're talking about a serious benefit to your server load here.<br /><br />Part of Varnish's tremendous speed comes from how lean it is.  At only 58,000 lines of code, it's very lightweight.  Unfortunately, this necessitates a no-frills approach.  And SSL is a frill.  <br /><br />I think it's very well put by Poul Henning-Kamp (lead developer on the Varnish project) in this <a href="http://www.varnish-cache.org/lists/pipermail/varnish-misc/2010-April/004044.html">mailing list post</a>:<br /><br /><blockquote>I have two main reservations about SSL in Varnish:<br /><br />1. OpenSSL is almost 350.000 lines of code, Varnish is only 58.000,<br />   Adding such a massive amount of code to Varnish footprint, should<br />   result in a very tangible benefit.<br /><br />   Compared to running a SSL proxy in front of Varnish, I can see<br />   very, very little benefit from integration.  Yeah, one process<br />   less and only one set of config parameters.<br /><br />   But that all sounds like "second systems syndrome" thinking to me,<br />   it does not really sound lige a genuine "The world would become<br />   a better place" feature request.<br /><br />   But I do see some some serious drawbacks:  The necessary changes<br />   to Varnish internal logic will almost certainly hurt varnish <br />   performance for the plain HTTP case.  We need to add an inordinate<br />   about of overhead code, to configure and deal with the key/cert<br />   bits.<br /><br />2. I have looked at the OpenSSL source code, I think it is a catastrophe<br />   waiting to happen.  In fact, the only thing that prevents attackers<br />   from exploiting problems more actively, is that the source code is<br />   fundamentally unreadable and impenetrable.<br /><br />Unless those two issues can be addressed, I don't see SSL in Varnish<br />any time soon.</blockquote><br />Ouch.  But that doesn't help those of us who want Varnish's speed with SSL's security.  Really the only solution is to set up an SSL proxy in front of Varnish.  There are <em>lots</em> of ways to do this.  I will show you what I think is the easiest option: Pound and Varnish.<br /><br /><h2>1) Set up Varnish</h2><br />I assume that you've already got a running Apache installation going.  So now we have to put Varnish in front of it.  The first step is to get Apache off of port 80 - that's where Varnish is going to live.  In order to do this, we have to find the "Listen" line in Apache's configuration. On a standard install, it reads something like:<br /><br /><blockquote><code>Listen 0.0.0.0:80</code></blockquote><br />You want to change that to another port.  8080 is a popular one, but it can really be anything above 1024.  In Debian systems you can find this line in /etc/apache2/ports.conf .  In CentOS it's in /etc/httpd/conf/httpd.conf .  If you're not sure where it is, try grepping for the standard help text around it:  <code>grep "Change this to Listen on specific IP addresses" /etc/apache2/* -r</code>.  You also want to make sure it only serves pages to localhost, so outsiders can't attack your Apache directly.  Modify the line to look like this:<br /><br /><blockquote><code>Listen 127.0.0.1:8080</code></blockquote><br />Now let's install and configure varnish. On Debian/Ubuntu you can install it from apt repositories: <code>apt-get install varnish</code>.  On CentOS, you first have to add the right repository for yum.  You can install the "Extra Packages for Enterprise Linux" (EPEL) repo via RPM - get your version-and-architecture-appropriate link from the <a href="http://fedoraproject.org/wiki/EPEL">EPEL site</a>.  I used:<br /><br /><blockquote><code>sudo rpm -Uvh http://fr2.rpmfind.net/linux/epel/5/x86_64/epel-release-5-4.noarch.rpm<br />sudo yum install varnish</code></blockquote><br />Varnish is configured in two places.  General command line options that are passed directly to the daemon are set in /etc/sysconfig/varnish , and specific behaviors for the proxy are configured in a .vcl file stored in /etc/varnish.<br /><br />Varnish is extremely configurable and tune-able, but this guide will focus on the basics you need for Drupal 7 (Drupal 6 only works if you use Pressflow rather than vanilla Drupal, but that's well documented elsewhere).  First, edit the daemon options at /etc/sysconfig/varnish .  The default file gives you four alternative configurations to choose from - we want configuration 2, the first one that uses a .vcl . Uncomment the DAEMON_OPTS lines there, and change the "listen" port to 80, and name your own .vcl file.  Here's my mostly default daemon_opts . <br /><br /><blockquote><code>DAEMON_OPTS="-a :80 \<br />             -T localhost:6082 \<br />             -f /etc/varnish/swearingatcomputers.com.vcl \<br />             -u varnish -g varnish \<br />             -s file,/var/lib/varnish/varnish_storage.bin,1G"<br /></code></blockquote><br />Save the file.  Now we'll set up the .vcl file to configure the proxy itself.  This is my .vcl , you can pretty safely just dump it into the .vcl you named in the DAEMON_OPTS above:<br /><br /><blockquote><code><br />backend default {<br />  .host = "127.0.0.1";<br />  .port = "8080";<br />}<br /><br />sub vcl_recv {<br />#  // Remove has_js and Google Analytics __* cookies.<br />  set req.http.Cookie = regsuball(req.http.Cookie, "(^|;\s*)(__[a-z]+|has_js)=[^;]*", "");<br />#  // Remove a ";" prefix, if present.<br />  set req.http.Cookie = regsub(req.http.Cookie, "^;\s*", "");<br />#  // Remove empty cookies.<br />  if (req.http.Cookie ~ "^\s*$") {<br />    unset req.http.Cookie;<br />  }<br /><br />#  // fix compression per http://www.varnish-cache.org/trac/wiki/FAQ/Compression<br />  if (req.http.Accept-Encoding) {<br />    if (req.url ~ "\.(jpg|png|gif|gz|tgz|bz2|tbz|mp3|ogg)$") {<br />        # No point in compressing these<br />        remove req.http.Accept-Encoding;<br />    } elsif (req.http.Accept-Encoding ~ "gzip") {<br />        set req.http.Accept-Encoding = "gzip";<br />    } elsif (req.http.Accept-Encoding ~ "deflate" && req.http.user-agent !~ "MSIE") {<br />        set req.http.Accept-Encoding = "deflate";<br />    } else {<br />        # unkown algorithm<br />        remove req.http.Accept-Encoding;<br />    }<br />  }<br /><br />}<br /><br />sub vcl_hash {<br />  if (req.http.Cookie) {<br />    set req.hash += req.http.Cookie;<br />  }<br />}<br /></code></blockquote><br />The bulk of this file is occupied with making sure that cookies aren't cached, and solving a problem with compression.   The only part that you should be concerned with editing is the bit at the top, <code>backend default {</code>. This is where you tell Varnish about all the back ends for which it should cache.  Varnish is a great load balancer, so if you have 5 systems on the back end which are all serving content, you can list them here.  Each one would get it's own "Backend" declaration.  If you want to load balance, see a different guide.  We're just interested in the caching for now.  So set the .host and .port variables to match your setup - very likely you want to keep them the same.<br /><br />Now test the whole thing by restarting apache and starting varnish.<br /><br /><blockquote><code>sudo service httpd restart<br />sudo service varnish restart</code></blockquote><br />If you don't see any errors, you're good to go!  If you just get a generic [FAILED] for Varnish, without any error messages, there's probably a syntax problem with your VCL.  <br /><br /><h2>2) Set up your SSL certs for Pound</h2><br />Create your server's private key and certificate request.  I get confused easily between the different certs, so I name them in an idiot proof way that you might want to copy:<br /><br /><blockquote><code>openssl req -new -newkey rsa:2048 -nodes -keyout swearingatcomputers.com.private.key -out swearingatcomputers.com.certreq.pem</code></blockquote><br />Traditionally, your private key should go in /etc/ssl/private on Debian/Ubuntu , or /etc/pki/tls/private on CentOS.  It really doesn't matter, but this gives you a nice central place to store your certs. <br /><br />Now use that certificate request to get a signed cert.  I get mine on the cheap from Godaddy ($50/yr is hard to beat!), but if you just want to test, you can make a locally-signed cert like this:<br /><br /><blockquote><code>openssl x509 -req -days 365 -in swearingatcomputers.com.certreq.pem -signkey swearingatcomputers.com.private.key -out swearingatcomputers.com.selfsigned.crt</code></blockquote><br />The signed cert typically goes in /etc/ssl/certs .<br /><br />For a normal SSL setup, this is all you need.  But Pound likes both the certificates in a single file, so we're going to have to make a special combined version for pound.  <br /><br /><blockquote><code><br />openssl x509 -in /etc/ssl/certs/swearingatcomputers.com.crt -out /etc/ssl/private/swearingatcomputers.com.combined.pem<br />openssl rsa -in /etc/ssl/private/swearingatcomputers.com.private.key >> /etc/ssl/private/swearingatcomputers.com.combined.pem<br /></code></blockquote><br />Now we're ready to set up Pound.<br /><br /><h2>3) Set up the Pound SSL proxy</h2><br />This part surprised me with how easy it is.  Pound is a great system that is very simple to configure!  Install it using apt-get or yum: <code>yum install pound</code>, then configure it at /etc/pound.cfg .<br /><br />First comment out or delete the <code>ListenHTTP</code> section.  We don't want Pound to listen on port 80 at all.<br /><br />Then we'll set up the <code>ListenHTTPS</code> section.  Apart from telling it to listen on all devices' port 443 and giving it the cert, we're going to make sure it sets a special header to notify Drupal that it's been forwarded from an HTTPS proxy.  We're also going to make sure that GET and PUT operations are supported.  Then at the end, we will tell it where to find the back end (Varnish, in our case) - port 80.  Here's my pound config:<br /><br /><blockquote><code><br />User "pound"<br />Group "pound"<br />Control "/var/lib/pound/pound.cfg"<br /><br />#ListenHTTP<br />#    Address 0.0.0.0<br />#    Port 80<br />#End<br /><br />ListenHTTPS<br />    Address 0.0.0.0<br />    Port    443<br />    Cert    "/etc/ssl/certs/swearingatcomputers.com.crt.pem"<br /><br />    # set X-Forwarded-Proto so D7 knows we're behind an HTTPS proxy.<br />    HeadRemove "X-Forwarded-Proto"<br />    AddHeader "X-Forwarded-Proto:https"<br /><br />    #Allow PUT and DELETE too<br />    xHTTP       0<br />End<br /><br />Service<br />    BackEnd<br />        Address 127.0.0.1<br />        Port    80<br />    End<br />End<br /></code></blockquote><br />Save the config file, and start pound with <code>service pound start</code>.  There you go, you've got an HTTPS forwarder.  <br /><br /><h2>4) Make Drupal HTTPS aware</h2><br />One big problem with the setup so far, is that Drupal doesn't know that it's serving HTTPS content.  Remember, as far as Apache is concerned, it's just HTTP served in the clear to Varnish.  Even Varnish doesn't really know about the HTTPS on the front end.  We're going to follow this X-Forwarded-Proto:https header back through the stack to make sure that every level interprets it properly.<br /><br />First we deal with Varnish.  Let's make sure that the X-forwarded-proto header is delivered to Apache intact.  Find the <code>sub vcl_hash</code> section of your .vcl file, <code>/etc/varnish/swearingatcomputers.com.vcf</code>, and add these lines:<br /><br /><blockquote><code><br />if (req.http.x-forwarded-proto) {<br />set req.hash += req.http.x-forwarded-proto;<br />}<br /></code></blockquote><br />If you're using my template above, the whole section will look like this:<br /><br /><blockquote><code><br />sub vcl_hash {<br />  if (req.http.Cookie) {<br />    set req.hash += req.http.Cookie;<br />  }<br />  if (req.http.x-forwarded-proto) {<br />        set req.hash += req.http.x-forwarded-proto;<br />  }<br />}<br /></code></blockquote><br />You'll have to restart Varnish after making this change.<br /><br />Now let's make sure that Drupal knows to look for this header.  D7 has some variables for this in it's settings.php , just waiting to be uncommented.  You can walk through the explanations in the file itself and uncomment the relevant lines, or just add this at the end:<br /><br /><blockquote><code> <br /># Settings for Varnish - tell Drupal that it's behind a reverse proxy<br /><br />$conf['reverse_proxy'] = TRUE;<br />$conf['reverse_proxy_addresses'] = array('127.0.0.1');<br /><br />$conf['page_cache_invoke_hooks'] = FALSE;<br /><br /># Settings for HTTPS cache - tell Drupal that forwarded https is the real thing<br />if (isset($_SERVER['HTTP_X_FORWARDED_PROTO']) &&<br />  $_SERVER['HTTP_X_FORWARDED_PROTO'] == 'https') {<br />  $_SERVER['HTTPS'] = 'on';<br />}<br /></code></blockquote><br /><h2>5) Test and brag</h2><br />That's it - you should have your proxy configured!  You can do a simple test to make sure it's working by watching varnishlog for cache hits. Simply <code>varnishlog |grep hit</code> in your terminal, and try refreshing the frontpage of your site.  You should see a few lines of hits pop up in the log.  (If not, you might want to try grepping for "pass" or "miss" to help work out what's happening)  <br /><br />Now let's see how this caching holds up under load.  After all, that's the whole point, right?  I like a simple ab test<br /><br /><blockquote>ab -c 40 -n 5000 -q http://swearingatcomputers.com/</code></blockquote><br />This will simulate 5000 hits on the frontpage, at a rate of 40 per second.  Look for "Requests per second", that's my favorite statistic here. On my "playing around" Amazon Micro instance, I pull about 650 hits per second.  In theory, this smallest of VPS servers could handle over 2 million hits per hour!  <br /><br />I love Varnish.
</div>
{% endraw %}
]]></content>
    </entry>
</feed>
